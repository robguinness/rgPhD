%!PS-Adobe-2.0
%%Creator: dvips(k) 5.991 Copyright 2011 Radical Eye Software
%%Title: PHDbase.dvi
%%CreationDate: Fri Aug 23 15:51:38 2013
%%Pages: 45
%%PageOrder: Ascend
%%BoundingBox: 0 0 499 709
%%DocumentFonts: Helvetica Helvetica-Bold Times-Bold Times-Roman CMMI10
%%+ CMMI8 CMR10 CMBX10 CMSY8 Times-Italic CMSY10 CMR8
%%DocumentPaperSizes: b5
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o PHDbase.ps PHDbase.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.08.23:1551
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/UniqueID 5000791 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DEB8CF0BE87C59313978F28295C0E3A01D2B5682DA86A38F390982A8FE
C3E81B8D3532C92C4A4A4BCB421D248F7619999D33C5946E5BF0B16F47313008
4F9A12EFAE517D21514A67C1DF31E3676FB13F698A0BF3D5A1AD7CB05CC415B6
BCCC75ADC4FD9723C3EB03DA94D16608B32B012B40992F475B63BC10EFE78D1C
32CEF7582B9A90364803108086E8D1A931CE90CBC3A224B356483D72DACCD79E
4E0A2E957115D2F97AE281BF80C1E12A1E79655D76B0D7FF6E6EE7973333D0F2
4EAD8EA16BD991CE5F09C3F248A656A89A77ADCAD62B4C0B881D1A9A2EE00D5D
6DCDDE1A2396B4CBD411A6437905A332760E69A4B19646A6481473702A309168
FE836067AFF8097AEEA874D5939A85F1463B51CDDF891BAC9495BA67017AF037
4CC92D2152FC597465EB939C994EF82F61D66840153330BB3FFD621C31C543A4
536911886FFD0B97091CF76EAD77329B635929FBB20E60C06B54734C0B9C8CBA
3277011B18674A41A3B91458FF1AE410DB9813CCFC818C2C4F21F6159049BF84
B009E0F3862D6E7F5E8D5C7F44D46A9FD531C93219E3A1D2CBD57EDE1A38F5CE
DE2EBC5713E4F0AF020FFDBC8C079E80C3F670EA4CA0B4F46B189C42C714532F
BB772D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
dup 114 /nabla put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E6861DBBF4AE99A7469F871A3940835
FFBE7F316FA9BB834EAB18625F0960352C75105A92F175850289B1AE177E0C19
69E527D3838D245FA634F5428046581A5672558C2AE610E9506694EA56E78393
DEA0173975DF161F6D0BAC5DA89B15457565B90532CA2D8205BD6E1BD52B4374
F268744CCC0A9B920196C0E0A4FE2B130A0E572FAFECBDCDB43BD59065A6A603
483048DE9626FC147B07DBCD680FBD5A2D606ED940F743735B75E76789B2A7BA
80A11B4F75678E8CE4D901111661DD1AFFCF410061690479D0C6516B1941C2E4
C6230724E9147F20550D8BD1935D1ACA50F97FE32ED5A48C44731BC7BE25515A
28519CDFE9692193CFFF8911C413680772EF21F2E670376B101882C9EE21D62E
341B9B948F7A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/UniqueID 5096649 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF1BE5F191BAEAEC7FE400C9980E103D8776EC196E741AFE11D249E0C277263
80FBD329524C55943E25631F113FBD8331C0044A7A2138637206A7941CF02590
577043EB0F205392C34E18B1ADA47CE63CB8F01365A044CE570FA20446102210
F03C0647CD0CC29E28B149F84C2F39256EE1457CDC3862C4082A95B44A61E8E1
B4ABAD32DA3E2FB8D849B1C5CEE60F205007464DF38712737776BB6BB3223941
95169B5BE578BA13DAE40B19AC184CB6F260A1EFE13CC8438ECB56EEBD30ACDD
8E24F52934
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 8 /Phi put
dup 10 /Omega put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 88 /X put
dup 89 /Y put
dup 94 /circumflex put
dup 95 /dotaccent put
dup 100 /d put
dup 102 /f put
dup 103 /g put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DC6B86AA73E883ABDC43AA6155756145B9EE8EFC505738B7AAA434E093E
029F4BDA397FACAB37996C354110879CA5EAC9D735A9EAD4C6090650B5D5023D
FC9947DE3D2582C88B2C8C9C6213593ED5EFBFCB8EB161A9C9F572701A3C80AA
033903CBED807628BE32BA603E03194E76D374D3813FEBD09ABCAE0CEDC276B1
390CAEE8408FA4E01108DF54D34CD31F444F24C67742DB868CC2967CDA1B8562
C4DC3AAE53445277C899FE86E54B8BDB1490AC76FF84E6E695E526BF8394BE7D
685F4AE35AA17151913D70F35CD7820B221FE0B71A0CA584024C964575599D83
F428992270E1039CAEE78B2D136545062399ED51E17EFE2DD72FD72ECAF8623A
C2C6E1DE8EF99678F333A0A25549721103667E88138D473DCBFDA8573A59C59C
5287D92E1A8CB5A195036AE42DFBAFB1E18A1941C494C795ECF17CAA969792C8
628B6809C79D5B58F56106EE7EFA0BDED029D2273032E1C8A5CD07991064AB2F
20E7735CFD4B13C2A8CBBE519A8F57C66B98A31ED82CC4A183ED86D278180D66
D97CE9B52FE6867C09D913F35AB9B9F6931BF820312DBDE76CEAF3D3F2EECA19
9594CF093FB8D49DAB28DA0EDB9463F81A02C55BD1C45D2C5729767507D93B8C
0D596E1098DB1CFB42CB821E8FA5B5B93BFB454C7CD598BCC5F92BA5486A550A
868D0C17E5861E79939718243DB1F2F6B23D7BC51D926CA86263840FFCC3BAF7
98B72E5F9191183CA5F1FCD9BACF833A9D58F384DC27B11B30790AFC75BAB14B
817CE2AD91E5FB8C735C681B6128A010E20DBD21C85CCC6C44715E1D1185646D
94321C24DDAF7FD77CB534E74F590AC18F55EAF42B6D05A127813E9A8F6B24CC
94A37ED7FE37D7D03026506C2B2940F87D0F698713B90AC7FA85278A2142CFD0
DA1D1C596EB9150A402C5C350AC7EEAB82D64F9A5EB6A08F745B3D99FA2ED03C
4764B438BFC2453C885BBF4681C524B689F96E3FEA51EF125D16E90735438650
54FAF9B77F9884F052D1DB422D245201FBD6463F31D19F41FDB621D02C36E94E
D84C9A5708441BAEA7F510443C57722A7FAC52BA1B67DA2B7114DC06904F0682
0D55CD9763824E0FF1718B5F45C6372BAB01A1318A6E3EA547E7DC86A6577311
0E7CEB4D7891054C2BA51E97C161BF37E788FBECC240A98771686075392EA0D2
84705383D05EA02D410DA660EE50583BE34AA67C3E511ECB7C52B7B6D47042B2
6B5C7B7D12DE631FE6C36AB405E68746B94535F38840BEC013B783E6A8729500
A4C4A0951F09F5CDA85FDD822B626F0B4DF1B21E63D184C4139B0111BF88E55C
4E52F038F5EB123E92319ADC521374212B1CD23971ED53E20514B82366A81649
630DF743E4EA8A8543CDD4892A544430AC0AF59716E855D662DC9AD78F82491A
099C3038FDB68AE21B1EFC462195008D84A1A9120FC2606A9025D662A66656E4
C9A19210AEA631BEF253FDECE063A8DC177D9D35C7B104D53A897DCC6B8B8782
AE55A6DAF28122ECCBCD490EA5EE4342118FCF06E64A80E3B42C6F508C28DE97
83F899B99D7FEF35E9CA5EF330B98F4D02827FC1683D296A95DE337689D93D82
09C94E88758D64EC342B0B34D53482E3D2A2DDC90F77340CB950D0E91B4F2FF0
A4D815FAA4FE47E40139457D7ECB92C96EA44ADFCC9AE0457CA22DA964046956
3B85A612E7D275AA4EE5B6493B7A5CD7B1BB36A193F6D8847358A6856E3D6F3B
11C1F343EA1AB3E596E20929ECCE5E9CC4B52E97089790D08FFEEA7D143DCC78
3638ED70E86F742C3B5D9421E2AF8F2412E78CA82C7C1A5FEE14044962F0B426
9F80FD7B5E55DC55BA97DC08473EC5AF48825E4C875F9484343056C8FE000CF4
19F9D5C3CD1CD7D37445D95CB57B366C5A147DC8909D62D505E6F32DAACB2D8B
047D23C8AEEAC26C79C01E83F74BD39E74381760605BC5F6067001B7B84E5DAD
79DC0BCAE06CA4F799CA4A4EF851F14F3251AE9031640587E2694CA97578BDC8
4D00D16391B61827E8CE2D35460A243424103B82D34959F530E6112AD687BDA0
971EE623A7AF7C0791540E890C37971E769F1E66239DC1308CA1F47614BC71D7
53CA5B72C9FCFEC5F1844DD2EC4C5C58AAA7DC809B6620C88AC1B10B7BFACC1E
FAFD38D3EDDF7340A5F235AE1BA3C6F3547FF24606651E5887FE8F61BEF5AD61
EB798D2240D716C6A657C2EADEBEDE7DFEAF203B8009E97A7707B1CCBF6FFF66
EC1EB8714D9A260B9ABFDA1218DD625BEF127AE1251A7C19DE1D9436B5B79011
B86CE236D7D91CC13592573F32EC69ED98A3E66366CF2D712AC5EF97A6A5012B
F840FD6A2F86BAAFF593D3F0E6EE3118647B765FFAA4E16B4D9AA865E7B124F8
86D8AC8881CED68C7E9ECF4FE400539E898B13ABCDE7322323B3A2A02A0BF388
E89B4A634B84D116EE6F2F9709180CA6A8CA11AE1447F804F96936ED5F15962D
7DBEBEBC3D2667ABFED58E96F34B1BD55479839D204C21B59EF681CE740C139E
E3D573D53E0357C206282EA14B0C75E8E5D87BFCAC4638A3CF732F443D1B30A7
267A6B6BFE5AE2616763C67FE0827A643323707D1A37CD0C8A8E40DA2D2530E5
96BD6CB249A0D1D3C01D8B0B7B96706DB9E5D35C2F4A23353BDB0ED9F3BC3E42
672236F80938E2A77D50EAE70A3A9C5DD23FA54DF92E3FD9B8F1DDFB27E19E2A
D33100AA690958191070F485D25BEF206D7A6D2F5768C8F82BB73A47A7D1BF3B
C0C3405741CAD5688C781F7D0C5036965090789DC12A52669BD8965EA03E6C12
CC57A2B5A6A940D23E73451C9673DCCCE823FEF6B7950098A3AFD46D22418321
95CAC051ECF6832A4659B60CE2F2BDA759AEBB19B020FF7D43BD337BB747424B
E88E67FEA4461051A1F65159650F9779E5FC0575729CE67A777CC63C4C9E2FD5
4122459FB1498EBB9CA680A624C20CE95AA5B5D4FA8B0889FB6F46568085B976
4429103D9FE3854CBF26FF0C74B7520BD777E0474189F24CA3C51D0F1140F245
8C5F158F923D2EE659411A431D0F98C8545C23E13589E516E015BDAD64E30D96
9A482D1023763510E0F5635A704BCFD9F89909A6399C1AC4D0139FA4810D9E3F
04C694B69A90DDA07639790D3E80AE0EA0AE218AE6177B393C79457134AE3923
326E8A8414A2DFD9B9984D127B8DBF71012B37395FA21338EAC57AE0A0A01DCB
119059945DDCDD42DE915A0D2040680530A8117A68F53C08A40B1220D07E50AA
D0A6AEBCE1138C4DE8E93F685D587BE34AFA8E1162FC9FA315C81AB56AA95B0F
A396565932ED05FD063B04D5DB6EF056D873F40C832ECD575609ADDBF7DEADE0
98F770B5F336DDB745A12B58AA95DD9554B87559F46081E023AA1A9C132677EA
E649D4B5737804F961AE4D73CC077BD5CB99DFAFAE7762165756074219C889E8
A7088AAFE1EFB06D0C43BC9245735731C0564F86ECDCA3733DB6C20565B3E966
72DE0ACB2CEDB3A6530636A2E81C7658FE0FA56CB03165D82A1E13E0F734D396
A15B929B807BEBA586CFAD63A9D3715C7351F06B0E7F74C7EDBA91E3BF0C5508
593F96E679ED90B850825A0E6B79120A109CE832B045B0900965E067E2DC30D9
852E0BD8330AF4CCB80A3AB648E6ACDD1F8ED153E7ABFC7F53AA2A25FA22F5D6
90D856955396FC8A125F39E95EBDC76E552D026270BA4D761866A2A39835079F
050E6B41344498871187ABE3DD3B16EA8B9E929E39BA2F5D18CAC96B880B7428
037536D3666F533DA33BBCD64E4FC4BE614FF8563FF168A630E686515334A3BD
98C5361B6622AE4D46F0D745DD4AC77A0A9BD8A7266FCCD02C1AA5F736883E61
3C5541C30E205EB8C5EF34DA4B4CA88E92B0C153AF7DE33BEA8BCC5F9D505550
27AE944077E1EA8449F2EB7BF0E59CBE126A469D1FE6CC0D9707DE984EE4DC68
69A0B14B0CD23EA4658B939FC9D8608E022CF2E2F2BC4027095F7F1E37A484BF
FA3E9288C1818C20D6350BCC45981D34981622F978747A691D99BEA27C7BF33B
20F0167862A987D153AE46D9FA5D21E7F6F83D4D72D0DDF435CF1058CDD6F98E
C7066BD33529EB5F4CDE9265E6B668D19E825C18BF57E9D770C2E7AA5B70BD8A
7A25432DF88B0885E0F53DE9B1216C8B0FAE2B83E330B1CE4B9CA1F96D4A7EE5
FC53534037B36ED9B874EA89EA0184D727C3161B718F3729E08ECCD41F02CC74
656700958F17D09D8B34901669A1D02AB14FE0EB99FAB73436ECCDE2A3260E9D
05C74491FB123B4244F78351C901333D5DC022272DE40344E0F7ACC6A1ED7127
110ACE193DFF61DBEA0B2AE1F5CBAFEEF1C5450AB1EE3875BDD79BBF71A86F3E
654023217AA8188773809679FC83CB97DED63D860E55B749CAF2FD7A45C28B51
F6189AF5D30C0CDABBCD3D8B6C6C00B45D31950CABEF15011BE1B21CD0F075EE
6C8FB1108DFC32842C776E885218CBF20A4CB4590F206705973D0B03237F612C
CD3A702459A9DE8FE0A082C79BC4E5C535B022244449301D3E6EBE2E8D90FF71
90E2D12DA3700D38017C4FDB4FE9C07F03E691F9BFDE9399FFF4267E4E9FC58A
DCAF162B652D5EFCF6F7AFD198313682D85348F5E360221A0CA98B4AF3F43564
6019409A4EEF7142128320F5E130B593EBB60DC6C8B2DCF3867F90A35696C2AE
5DEC1D4F4E02B30FF265AA6772FD04D12925119E1FFCF2DC979324A1CADEC18A
3BD7F04D40C5F1ADCAE725979D3032F78E22EBFC8BA2CE62AC4DA4644470282D
391CC097A598D77F4F7EB1A4548B4F737B1F2D92923C11DB528B0F5CAE786AE1
85A98BBFBCECA56E5FBE1B60C6AAF342664ADBE61227109F2B97DD1248574B0F
081F9B744024BE15A5A27C52D6799287DE1036C357D28120D8BB97C623E0A9B5
405B557A61ED542C62514AF12E10778ADB443D1659E0065D4A1731E903342D83
2950A1854C8D5EB2B3F3AD088D0A1F20AD2012F28BDE8A7522AC60AEC4618546
B2D9A564C7E15FB2A24E1E514D7B06005BA1D7D544AF785B1D44265595EBFA42
402F6284034428ED573262FAD36503DBEFC6577222C5A1F495AF69E5D7775D7F
285452CA00E159367F0744094CFFD5D6272DF4861D6319F2832F9338A9B44FFB
30BCC68BB9823CBC6DE215B6C91E01415D867A26465D211B80F41B55384C8D5B
F2BC91AC397156839E10B3B38EA8582D2459B3A44346D2C8AA8E1FB13C475715
A4233F309BA1246B2EC04A6E86EE90F7683BFC579EB8FE53EFE8B9429DE4BB92
F617FC2489C7A5F1B0C6A9F935936DEEB153B17912DD582AE9DF0BAE0A2689DC
9BB8DFC74EB75570D1EC741F96B3D88FB75D8C67EAF8EF5C81B5FEE620466393
889A5A79BC14EB951353076F84399D9CD2A8E911F3AB8BE353E5BC9FC88B7355
BFF6E213E8B742946CD1DBA30F12C67730C713938C45A9C526F4B62C6678A166
2CF1C2F2641E31A2E6E8CC3BC3D67A67501C982909692CEFAC16CD19D79EF343
9D437832A6E92B0ABEC84F2669983E01E3CE7FEA57C1D9B84A937B9DC001696C
8D27D0718778374C0B76657FA361E7219BAEF8630D0AFEED34E2B0FB69BC9C21
A8357F78E8422F03CB47F4367DD2A4FFAA6B32F932AE474F6D5B46FB39045C9C
1B69ADA3BFF56D7C0B3E6DD49E5C309D4279B743C733E33F463B9BE06230F124
2615C14B4D2C87B1E43A1464EE8D4E7A7F8811F9BF27A09977AF24C6CFA80A07
B4C0D0FB478C90E3C08D8E0942772C8E8E7671DB086A5631860B81B94D697F7C
B832022154343B53FF35D6BB2B18EBD76ED0ADA7E7A325F408DF023DC6BE768F
5A2C2E196829DD98E6A11157501F7482116C2393C797E9CA2287ECA1A4E1A726
B77B817ADBF1E51E6D712FEA10A098BFA876AE914206E4BEDC5EDAE763FE2A8D
450867535A27E7722C071A4C3E6E54B782FC719779CA928E41C17B6A81170D5A
495466393034CC1AF858F7BE559FD2A1B953D0FC5A77AC76313D709CB7DA58AD
C0088055C726FCBA0CE2900CF9A1C2A6DF2128EAA63E33E131BB997CE61F04C0
6958C82E55AB54D15B4A2B932916BC598E71DC18A683316D208B58DCA191DBA0
D3A30DC495E06983EE045970FE062F0CD666408D7B068F41988B25508059F651
5412632EA6E8A063670B5E8CD35BBF9CEB13039A67E5742D3398795622447FAD
9453E13F733EC8DE12E448962AB63F5EC57795F6B8159D8C19965CA4EB10AAE3
07ABC4843704C57973CD13BE74AC4356497291354E692F5521F47B4C019DA8E5
80831DD80DC33B0A9A6B16320077F66C19371C95D8D907EBF84A732DD45B686E
D76A88C2227E127D500CF76563471DF85903882F52BC0F5DA793E76D9E8767F1
251A857A193AD0238579968E1FDB2E23140C26B2D324CE172AA618C98D716275
6DD61E355A5FD18D14D8B7ADCCF2642F49C46C20737EB444937BFE9FCA3BAE83
82644AEB07603A2B6075EECAC96EAB8E6EB594AB29EF032A7C0432448A7BFCF2
CE42AF8A42EC2AB773FB0CCBBB46361F7F7B6476ABC323B6BBB2E1950512E88F
4DAE2922DE73C8D6137AB49D5246B3D6026E52BDA31855B4E48D2D247862CFA1
DBB826564EFEAC0836BD339BB3C7DA3B5465C3B0EDB21A70E77FF5FEE75B4426
F3AE8D730F4D1503EB4B846505C13B4E2AAEC6CF2829016ABBF99C2E3ADF7023
6A7BFA44484E96F46C758E19AAD83B0FDA4775CE4B9E54AA86DB32B46331B735
A2F4E17F76C49036C3CAE36123CE4F3F286D603AAB430591F6642368E6CB6AD7
EC4A7FB54EF2631D4F76CB3144DDDB7A6ED0919EFC8239F7FCDBEA5DB1BF8374
B4200491E0F7363DF9CBEDA8877D0FC6C6487E89DFF7A7E0A2EDB8FDB178F86E
B711CFE88A67A767C920E84FD1BA15CA488DD55DDDEED966FC6427D24BD7E289
4FF684F06ECDB5FEC44C3D98C21B8881233CD5AFCF87EA6917DBB2867F9BC8D2
87B72E5F910FB6B700D4455C29BC550D47714EA76AC2D35C16A369BA930294D2
7652FB2888E17BEAA78DF46C6A6126F70782E7F802FC997FF69242DF7781704C
85594525E2B7FD1E9A6DEFE82CCF48AAAF502F9A6F910EACEAC8BC4AA397876A
B37135D68BD8D05325B0166337E0D21DBB31AB40FF49B6D5E4F3AFB33F5FFF20
1DAB12DD76EDEA2C15D91ADB29815BADD9FBB1464C9D12E5AE1A472C3887D1FF
F2371F17B14D2F5C66609F4C78887EE062F5AA94C09A69B03986F37F8103C396
8D13DEEA7CA9161BC1B71F3D84DC17DFCE358D6E4F133CF4F6B74FBC0439FA54
8FE5A87B10C020CF90AFD647493EFD177266D081E5D9216A67462E3B609E0CC7
957C404218D6A3A2504337D016E5FC820DFB1D126380BEB709864FC035863828
CD192F26EBAA8F310E43C81F7EA819BA7EE6EA6628CE9903C3D497F01C49E8E0
B2502B552033CEC6D461D579E6F6DB9257AD6EC1E2C6C252447F8F2738A34868
B518FDDF0415D11A5A2948AEBABC9BF744F41E45370515E1B0EE237AEC7324D4
628A46CBAD9B664E78850A9BD3B69D534504413B77BC35DAB96D764E41D6EC7A
7935E68CECF3810D1636935602192D19EB6E553C73CC0E41ECB9B706C08E6D3C
5AD462F825F1D30EC973AD21259AF8BD94E105511030884536CD86FDC85BCC55
F1906478327170C0A7D1E9E90787BE7891375D9B544113E377193368CD3249A3
01230F39BC22FBACAB26C0132F9B7460E955857E27535B044F785039F117B1C2
DABBD606A4E016162B6C1B13999A48DA0DA981A6DE73F6479640FE2E60B671D6
B0AEC5F1C15B93B811C3A31BF32E18BDA2FC6120F98C4838E89011FFB9385396
02AE0792B7C038FFB9583C7D70BBCCE859714E28CC79CABE605BFADE52E624DC
2B2CBE7392E15D875DC3027F14EB2C46B7C370160007C2888E8D50A20D1BF348
EB19F0157179E53AA7A7B20BD5DD32549D20AE9EBC1E56F2A776820FCA7C1A4B
34B2D4B8F3ACC96390CA4FAE4552F30457C80554BCD225D70654F58EEFD8D93E
E6395E2691A8004687BAC1D85094164D928AC737D28CD610E27F911A90F52972
F42C473F99FE2B83C0BD5F120D0FD5B4EA22152620F38A82AB16B3BB70609C08
FFABC68FBBAEBAA81E4903520DA0990EBE26794AB998D8F4DCFF4688CB16E789
AEF42B47D5062FC7F32F2D0D911B9577B14E35EE2EADA5A6B8F2144ECB33CF24
F6C0BE70655195715123016D115A605EAD5530B498FD80F9788C93EDAA010DAA
ACE89F3C9D0AEC14C29C57A4882B5A3DD971D3B8C0883427A44C3F7A55E8D0F7
23B40140F7AB6FBC840DB8D11FD7E9545171BC56B500D08CE8485DE69FF122E2
530BB7823EE0082311A362450D2AD18B7192FD5BA028509CC302D7F5A6340600
B1614ED8F1C5414D0C4EED7D07364D684854EAD55AFB82465C0A2E9765A701FA
19F34B6C82E08BEF6279AFACA1EF1FCC92BD16BCD0BBD14757624E5B18AC9772
E6221F69F6A995258C201EAAA80FC73827E4F0B6DF88D3DC6FF122AFAE1FC972
4490FDDBCB65344E9855FB138256F1D6D7ABCC76386D38D56CADDB811219DD22
3AF4F872879005B338D3B66D720A188C4263DFE43B9D5C4F19756584FA62BBA5
942BFC84734A4E85C32D6DE245E082657405C4B4FEB988B05F512B22A3D0A4F4
827601D9C7EA82F00AA0EFC4BED84276B96DC104FA6DEECBFEB21FB7C9D52F36
BACE120BA1185DCBE5E1D1CC97FD3A412B85C9F162B8320F48A7D711EA2C9036
1AD26F6C2E8409D32BEA2B29BD1ADF678EE59571A81EC08B55E0C1CC049C0AE2
B89DF495725D0D01C5C559AAB833876824CEDDC18A81023C0A3A29CBA76CD49C
DE0FA5073FD6AA88E24972A6FD708685E81F0ABFB557F7C3C722E34B6F9AFE0E
10B777A7ABF1491E2EF10FAE6913292AE8782321371FCC8B072664C5E12E7129
BA7862A30D962B0817F4C745965C22CD2961A26CC0287DCFCBF21119969BFB1B
BCF7593D9E08A49ED319B17A044C936C8977E9CBF27B0206D42D82D2022DBC06
C2CD417BB87597207584EB48F1250D58D35F18745554E226332C6251A80C22BB
17CBAC109F3631371CE4905FBC362AC4C9BFD885F457623C6C27F9CEE889A967
6F458A5D7D8F32EF14A41779CAE3AAD46AFFDAA08197EFC2E244013030F6065D
2D506E9A944FA538D9072FE2C97F021E3E099DEFCF93126FC67964C46AD08083
732F1167597A81D78D29EC9E1F899BE612F9B1506B6213C7BDF35CDEBBD4BD86
6647753810ECCF9FFCB92F7044E180565597931D7489665219C558CC691C72B9
DCF19994442F28D22DC840941100D83F0B3032B1484C545ED43FB68B76D3A563
A028465F5CA1B2D63CD7A7A33C9F3C3B8D794F5A75ECBC066BEF7A744ECBAF6F
53F2EE0E2A2567E51BD5E8669503252E928281778F37677ABD32DF6DB01E8394
EC1FD36A015B1A8413770151A25A2D2BC71FA7F2AB8C7805E61B220B2A8035F4
6FE5B9502940B919FF1A1C101052464F0DE143BF64A37DFF9808AB461931C3E5
0FA6FEB00BC222B74F7299CA3BDC60E2A69EF366EFC9C9A4303F06FF48F25E98
57C084DD5C12AA5072BE796574868231CE78EC3A3CD882B01471D4222D31ABF5
93F5424BDDB4F098A5C5AB5CD0BB393C1C21F51E74078247293E82E74012957C
89DA5FF52BB8F396B2C3FA99F8B4EE0AA30B1DB760EA4A2FA4B159974E7DD4C3
FDF8CFA0B8694A11A6EFCA9AD52A30E834E6C0FE334DA008A1B3562681A82D12
5E3F7AF16BD8D6382DEF1917C6F4F876FB4B080BDAB3A2FA8B5BDD20FFCD355D
F823C879FD7E5DBE410FD0395D46DEBA4F7BA5491488DFBD41EBFD0CE8E9494F
8089E3231363D1EA1A0271947877A23C0E2FFC90635BB380640BBEFC9A31455B
0DC8A20192891F19EB4531A7A1206396832F40A899FA2E89B0F992EC92A8B487
53489001F3B8D27FF9D32A4479DA9A6FD8D827EB5A1F75D78E0A0166A3A6074A
666518C2FF31DE0EDA1AC746849A8CD51D0F40EE8A0E7E27930A066F14230B94
AABCFB6AA6FEF2CE02B3010EB3BFF8364934F41C8F3F4E5A9502A4B17DEBD71E
5AF9E09245D5A29920BDCE2027DAC342349DFB5D4161706135D9EDFECF015AED
990A0319DC044617C344FB2A04313247EACB2FDB64BB68E1665C049584700B13
BFC5950B3CC2ED546A696ACC624D53986331A97B2E5663BDDF8B00E1410AA59F
CB711FEDD2118EEB417D05810F874E03DD863F82947B7BA05E4754578E735642
49F25DC61D9B72CD61FEA3D33DA898FEDE752462FDF529533B33901305AF35B1
C68ED3D0556C0F7636E0256DA00726E767C656D03A31B1818AC8E252B42E4C85
180BB337C1C5D37A94279DF07F2B9D00BA94443E58B03F7DE9E5D24EED5A06B6
233C5B0FE001D6FAB9538F11387543C5151BE9F7054686690C275EAA5E81F3CD
5720C86C7977C1A29DC1BDCAD3BD95F8AB13BFFFF27ABB743D99751A920FFD31
7FC1D462AC31A882E51EE2C933076043C1C1E6CEC3A70A4F6927FF9928C75E80
A3EB18944E5115CCBBBC2960A405870BD3CA2E0A492860D8C32508E5445A8070
13EC296DE7DA837DA67BE84957A656F24A24BACE2AE0844B1005CA6410D6D490
2FC0E967F6DECAD8E272FC8B8A4D3490C1BBE5E8DE180D341DAF9DBF6B811D2F
1EC09C9096786E7E205AC68625A977DB0AA0A21C0626F9B17202CACC6F165A47
5E135C1231DE1EAC259EA4CDDF43DA78C238B8366EBF6FFAA0C8565B6A630084
F8FCB9839187D70BEFE3B0B625C324DF4473D6B0C7112E7CEE7503EF82046E45
99FAABC024050F6E2F17DC6C034D0438AC1D74E1FA87B09DE23A83FFD15E073B
D04093089236808DBFFC4FA1DAFA40C87AE131DEC8B8722F6E0842AA4BE9ECBC
9FD92B379C470AEC5573CED42AC664D461224C9ADC151D68D76653C078F9F8CD
7D949CD13B88AB1B31DCA2B466681F164BCE46512D43BF6AE2641BA3AFAD89BF
27908D6C68B7ED9F125EBC2EB2CE678746C8F168EAA7593661E63B30FCD54E7F
E853A24E2DDA686F570AA6486FE78694565931C14E60986F5F5A6A5D117B1705
3A8C85980D264D9BB5E5F56AC4E2405EDE39C218D9BB6851B13C5536344A4AC0
E96ECFC04C158AD88B7B58BD794F4610B86A859499B198B36E8A3DFBD84909D7
2CE4A4A77F05A07F14490BFC9001D6749E31E67738891CA3F61F74701CE2E3EA
151CF77176A50113B54432E5B8AF9CE2FB7F8644977D3408AF1E2CB09B808583
4354B8AD733C2E956DE6D7D2B0A32510C7CC6EAC7B94A8F30316CEF6016196D7
CA8C06DAEAF958080EE4F2EABB2E8D2E19
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /Delta put
dup 40 /parenleft put
dup 41 /parenright put
dup 94 /circumflex put
dup 126 /tilde put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
ED21A3F8B6E07EFA16727EA0F824011AA822773DE75726823F4B15AA874149F3
D8764A3DDF0D272C713BA3B611BC4E2DD886BB8C53B28EC845E1278FF4F0A8F1
AFB3A1F7CA4EDB0F801D02ED63B52C20DC3BC58AF2607DBFFDFABDFCE1EA6E8D
041BE661E7A4548A54023571DFECA66E03D73C492542A74A0B5C7FE718CB1ED1
2CD51A3E89DFADB57108933733A6B88161FEC445841CABA1D2A59B405B86983B
442836416DC50F7333505B8BD1C756361BF7F7745662E328878A5298138DA9AC
CBDF383D124AD0A3F6E2067C46264EEEB0AB0FBF2EDA1A8420EF654A12B0971C
35FED21C0F18EAAD912D6F16C85A4E041FBAB4FB04FDC4FE2F15947DE72BDE53
9DC79E2EDC78EC8F873407D8ECC2D0DB427E8E9D7FCC7FE4A0402545D8A0E83A
D725089C8E78B68456B61D69BD45526B01C993D991D70B5EAAC7A639213EC0F8
2A1D7750F3F1F523CE96CD5CDD217EDCA671E554B36E5C41F9626D105DCA9D58
467BAFD6F42DEA149D44C84A2FFD5FEB668E1A6ABEEB389E2DF0DF373FE5AD1F
7D9D6AE3043A5B40A0BE90965C2C34C42797BA6CD6DB3BEC3ADA1FF4C8EDA146
4E4B6822B0EA9B636F53F71DB75B809D5CCD73F70E47664DBAC932B777BEE502
CE3B6EF1A25D43B104DB39F02F686DE4B50AC46A084588FE301370D560276298
242DDCFB5B93FEED8AFAE28D517B4883621CA300ECCB25BF1330E865801A5A5C
EB0A22E02F330AAB6481AE2919A38D19CB084ABA99F097E94964AFBE6549ABEE
AD5264A033FB29E70F1D17FDA8AF3616C49C07BEDA6A2349283F0AF62704F47A
967109871F31EB98F5CB8CE8F84A9D9617F983A5853B5205CED3C6662F5AEC5B
3EFAA888582591731C8050BB9B11F2C8622792554F2C5389FE22C5569B2DB129
4E15C381514C1E1BDF36283AAFF8AD785A49E0911370EDFD43571C36769B6559
680F45B2F405589F15115334B80411532BF22520355476023178043584B70DB8
721D100516CB839EDAEB4DFE011D1947F0D4874F6424753C0261F3A55F821AAF
F780307168F5F61A1A3E61CD892B5DE3777908625E1A91DDE6077E98045995BF
C582EF3A79C9F067B1C1D5C9E915592F7FABF796B4ECD8E58D2AA0A9A70203E0
5F26F0B3F3342C6D48A04DF4C42D75D661F33430B0CF56859103CB5CEDB58B1A
8430F7C7563E306B853097B47852B119B42A65EEDFAF486F58FEF25284B5B561
8A6762967822C7A6CF8C1F0C4EC952C94AD319C715F1CABAA2BB9F73FD30947D
AF090BF54FD4E7B01311521458871B0C8C9D69C9BF448F92E9EB110E4A01476B
E68E839DD0AC9CE5E533A30B97B735B1A91FC71909D220C791738F52897308C5
0EFF8B523251AAA1CEDEEEB5C5AF1853D86EBB6D506361A069166517C74B64EA
8B89AC8F875714E47D092A699F1B16C8ED115437A8EA8CD328F26C329D74455F
F83DEA9E8662C77024836D8865ABF48AF94D688139DBF47C7AD4138EBABF491A
61ADF482CD82580E6E4EA1764D3860EB4F1C99EEB8731408A9B51C9A95C15573
DC6DD4AF01750636932A81F928392CD5B440190F11C953C3C8FCFCDF5C20A99F
85CF1F75CB00A352AE3DE5D771C66E86F97387D4AE97D6E9D04A2E3CCF5D098F
7D805E22FF817AFB2938A9F76D600F7AD427325B4998F156F54D51D76CF525A8
99843213C13DF3E50EED85DAD3A70626B5C9CB7934B5B7C0DFFE0AF6DB142F9D
944983B19A5C42053282E1F937AB5D7E0B35306BD2180CD198138A8A4A8327DE
2AAD880931DA86BBFAFA13291C28312DDCB7FFB35DC10FB674EEB14A27693511
4F1DA253C4E2C6915C93011DDA81D0885196DDE3331E23EDE760BBEA210077CF
DB98963EA40E702874DEAF5C865DEA06501B0FC537D2A58AD06AA5691C989881
3E5A4AC9BD0087BFA2F2D97A409E3AA30836AF4FB165FE08F16214F6DAC9E784
E3A21E12FD05D033B7BB01DD0B9469C910B7A7D8673DF314F1B24A651DE4DDFB
5A8F647CDEF44ECA5AAE552E5A9883982B360214C51F7B2776DC8DF7A1B93A2E
E3D97319A0009DA311F4899F65E76D6828EC8091A1711FB1C840B9F34A31386F
07D66ABC40B5D1665CBEFFA971992FF0ACEF2A6F942199974FF7B2472439B5F1
5529115D38B484207D8F70375F3368518792439FE6477286EB7914B7BF4A14D9
4594408AD1128E7AE34F5531F8268729CF04B6522FD7DB85DF65E5D83E4BAF0C
4AFBAE8CFD73A596F7C7AF437B8AD4F2F70C2314035F52C165A49120D5332A13
6461B27E1D67AC4CB279D57D905123FC23D46286CDBD70C1E35DA20D84385CF7
C56DB4A483D83D7CDB2BA248A366D5E4BDAB0EE6EF76418EDA7CC6B8795043E5
FB6F899C3F6201A14005F524A46A9757D94335F9AA9F42C1330D465C5BA1D48A
8A22F2FF86AB80143BC0C81D5A73EC8DA9F2A0B2D5DAC354F55645D40D9CD64B
4D9C601CB7DA406DA85CA0B7C26E68F9E48691ED23DB0D3AB076D67B96DEF849
8BCC17589A700E889B5EDFA8FF2639ADAC080E47FBD491626CA771E2B69CE5CA
ABAADF0AC7F8C598D226227FA8C178C10D90A2F26A639CFA01818B57560C0886
8F0F26B2DE3A8A834CA31512725466A7210FFE6617ED0227426D5B1352397BC5
4B1CDF99397506DB4D41EC266C58862DC40E95DCC8CB8A04486F9F9874A71B79
F6063FF117C9767B7B36387B0A4EDCDE0B975063CBC2119231BF96CCAFDF2108
B71683C44713596918E1D72A26F81637301E0CCBB9D01BDE2098C50CFE6A79D8
59193223AAB17965D5A95BC995DB17DB0D2945AED6BD7B198F21E294EC7F7489
2831CCB10F91A8F69D2CB41DDE0DFC37C447DF46C22E3B835ABC68EE4F0A2080
F461208759E42379347803D55E04C975FA7C88461B72F820740208136BCE1A24
31C1789BFE1B0DA38C28446F13C4D336B8C4C157B0A82E4A0DD054D80C05A026
49A14EFA5EAD04DAF9D8A026D4FB9212954B6095B37F97018C8CC9ED23D72CB3
06E12E9AB830108A138E935BE7E2BE936DFD28EB246959468596D9C8EB173058
004CF2C1F6C4A65A9DD40ACBFBD0A2F68F290CB7723EF5F951F6C5C83BAEFA99
39E72489096D9C2482E961212114969ECAECB928DB6DC5D46A78FAA4A2D2808D
9EE257ED9EDDFA7A28DDD05AC981D52F181D61DA8B923EF122D1B0EF67BEB3EA
CC4D4B754C6DD160206DBA4C6958B874658B0E254E8A532E7EDA7406E618E00B
667D6B944B62D7DB1F9B8238444966DFD643274263C017418593A2044EF642DF
6FD4B6315BBA23D965F4F7DAF1C7DFB3D1FDB77D565576BFCF4D42D766E204A9
4BBCBABEA083ECBDF9D7C5CD80FDD25B54057224C3649D70E323267DA76CE12E
6E4AA5CC5C9F4F3BE2007B03090767CF66CE3EFE47BE6F904735E851F9FAA4E5
27F3D4AFBA8B5A98C352674D67B5B6F22E6C237EEF374E74423ADE3F2D4505B5
BFB3B483D222394299B23656F9AB21629194F1E9E22DFEBDF7AAEF2F1A779EA0
80D72A403825391F68912803FAC52A90BD2EE851210A9D30837DF80B9C977B23
32788F284070090A6A17AE2757048B83E7F74E8202B47685D068EA716D278443
1BCD49E9FB3C070C5F12D0EF6065182F86363EF672C8B17A50F0A52B0BFFD978
B5E9110B3AAA395D017705FCF85D54EF3992904502CB0B958AF23B89C158D36C
CCB9B2DAC7C6A13DA486693A483FE4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/UniqueID 5087383 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 67 /C put
dup 71 /G put
dup 76 /L put
dup 78 /N put
dup 87 /W put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF7785FCA8F089152A57EB8D
5467C28AD44E890380CEA0B0E0CD0F6427F2C3BC1A5257BF03D902BE94A449C5
EB8F33DD607BB4E0A1A7A24431E1DC2F03596EB2039CC1A9D524E10B374E34A6
4DFE6694F9E158DD6678BCB0B56BFF435FC4F5EC442E14391B45178DDA235B7A
07AB6EA76230B60456344BDB08C929F9453553452C97E016C26C11B68186024C
D1AF6C638EF54E26AA88856FAF1FA9A0DC5A9EFB7130EE72EB3313510EDB1DF4
8D8E512036A986387D8E96689E912149A342974F559E7CA4621E84351914EACF
7810F41CC0BDCAD6165182C7040F052C34D073FFEE489549EFEF83111310B3E5
F67EA5449D3D81DF1FFD64AE0F1A760922FC629FDCC6AB0DA66CC29665BE386A
4DC43CFEF3C5904356B7B2EC0AF36BB4FF6A994C8158790674A8EFF54A36B7AD
8C8B833C1D1FDFEBD7D39122BA602A67ECD2EDE9D35C2628EF1FE34B2CDDE154
2247242DB2541C5FD49EB8348536B83A67E718DF66A627D7C7622F22B5D3A3FA
5149B224F82B72E4F2A1B22BD6FA7018B45A404E66E2C6B96476A39E5D330AB2
ED04E2A7FE38D3A88B439E804F390F4B7893506CB00CA5B21F103C6090BD81FD
8B24C085EF70FDEC026B1ACB30F93F58698AB2A4E7319B1F5250B6815E30CBEA
4D9022D40E5B34B9E6434393BA9216CFD20FB48B760044477D3DE7A7BC237F3A
04098452AF6ED540E391B2399FBADEAD385E9B3E81C997B95C35814EB3CEDC96
A1AA3C9D31DA6031A037E12F1BF1F6F369CE5A60BA05033D039EE15E1D877CEA
D22AB7E850F13B902D10ABE977F92CABB607277428730E7CC12976FADD83C9F6
7AF560A0EBEF0CA9A576AC598D6ED36978C3A47847EA75766713A4F1F13A14F1
2B624438F016B72A54D1026413936112BE134DC72DCAEF6E1EA482DC49EE6DB7
A4EACC053941A3F1431805B5473DDD292DBE2FD2DFED424D25A1A40FCAF854EB
DEA92FD943B1D0E2F0C81C72A1ED9129AFE6FDC0FA1CF2C3983C6AA6A71E04F7
E740963C1F34F063C62B11387AA14E7EEAB0CEBCBF5F52704A24D2CA4A51D12E
D918E8F41D3BF0201D93000B49EA8D875C14F6B05307F76DEF6D1DC7E07683B3
A605A2EB0E2103CAE4787625E2A27F993925CB667EA311BF92F1FE75C5F42D7F
4D062254DE28A7283ED04CDCF7A15BCAA2496D333BF80C14D0A0A2D4F1DFF8A4
362EF49334C1EA99CB2AB274FD4AB3216DF6AC3068BE66FD37250235D71BD817
61ABA432A15822EAA7CC89AB2C98CB021A013253E1017A35D2FFB27F3D8F78FA
B9776930D547C7CC67992E0562E9266DF29A3614DD2DB2D9251D01EA486174E5
CABDF692D6FA9E89050269D35C3B29CC7DE7B116351904E25786FBA2FC74D251
649ABD57C95767E2CD4843D5E25A37FAE8F049CBFDDBD9685C4D0C99F9FEF357
A62D28DB93E473996B280B122302C1208074ED244F79205BEF1530DAA24D1E63
208CF842230F72CF5E6552977E64DA9F0DA0A20CD7619C26EDCF60C54E274A31
73ACF6EBB8A1325BDEDB733E5DA8261408AEB6EEFEA918048FE9EE9315E3AD89
67BEE4FA79E5557A236202C9A058EF582CEA8D6D8DAB3C3D60FE83108EC82A11
B87D6778156A906CD5580D72C531C0C92D8376E37228E10E8EA376F79F91E928
7D59E0887E44CD5E70B3AC3F690CFE54784ABFA27D0B63B32F710FCCCBB7A6AC
553FD5BB7A0FF35F4034180A324A568FFDA578DF59752EE4564DB38DE672DD45
714AC67BF058BAFF9FB57E59A1576BD5EBA2564899DDD635F6BEBB54E4512035
51EDD04D43CF3FE0CB5A586927CCEB64AA05B094673A94BD7EC9430C3C2FCF03
C383474FC01DC98CC8FBADD3D0159F1CEAE765332DE35898F9E4ED5C4BDE3FAB
050384F6693DBD75552EEA2E1B25CC391E009C890E586ED836FAF14D4E9B9448
C1C2BDD46FA7F34498A8A01B67556A7A2D39135741D8A2670ADF275DA137B6E1
B27D8AD9B60E508D377AB57F99CD6C7D812BB88646215A4E3C9113F410E36097
FCEB3CE52691582F8F5C83787E3595D8DCB848A4EF340A9144397B52B9DACC1B
B7F6DC0775C9FD0D311EF6204FB4DDA2D3C97C8D6D8D5450F62E53EF1A337642
24E05D3D2F9101D20244E0BE659ADD76E5E249DDE6065207D04B3EC2366F1E83
0E6FCB3D2903FC615206FBFA6258A3FA91A86BA9E1DEFD4AE4CAE6816AD4339E
5DFE5EDE3BE0F4C5494FBA8B3BA18E6E1D3B002EBE654938ABA43C8AED803229
6157D731926C9AB91044C54A6999B94BBF0E4A0DF0B76A2D2E98AF50E804D550
43708C1CFFD05684E6034B53C92ECCDBE8088757B250F863FEC09C2EE68BCE29
13D14A03F1F909174DD8D051867CA74ACB198AEA844377AC2170CDB8FF390D78
BAE70778BF3BD2E8D848768FE9884E3611146049B7629D1AC1BA6AFD7772F4A4
05DF8090908D4A9ECC0D52BB98223869905A7A73FF7AA97AD16E64E7074D1662
6798C18F8E3BC47F8F3845FE269CC501D34E246E4FB3A637C4CE4EBE810309C0
E066F226C5684B3C588AB2D82D88B1D5F0B871A51C5B21B944F95D3CA9078EA5
1A882417E39594847902B344CBB92FB64851494BC142BE45B83A345A7C305736
B5B7C443A72BDD65CEB5DD168BB07678FCB2CC7330B065C1886E2C07E9AD4723
51B2D30AA018042191A2CAA11985A6D9C68BDD022D5D8539A70F4B0BC9F5B5B2
EEB39E06FCFBB7B19CA580F5FBD1A79DC2D75F5434112B471A3FC39B09216F82
8B3AC844C5D6A1EAD8B27A6FB56E40768FEA8842AD7DEC452D7E9B9399E1C7DF
B9526BF9963659BB65D88A824AC2D468E87C73FFDDB9A7F94D75B08B53FDE699
C68DEF937FC2C05CA54F314F0A841F6CAACE261C2943E03EECEE691131A84571
20CA36A79D16A4E9C0F42A4425531FE396AD70A28FC99E7B93748B7BB7B597CB
684EB1D7A8D180DE9C20B857AF377EF28E27F534580416DDA8113BB2F70CE867
AAC8A5C214732CA2C29D2628CE81573EB088BBADF0ACE79071312535D0CB9A8E
51C7C6D5765DEAEB70E44D3BCF13A016CC5A7151BACE499656BF0163E83DE615
2571F17C7FFB3BC2F7378948DD7CC3F1D0DEDA7AB582E759B60DC75F6FD630BF
9FA4967F101F5549CB8ADB805082853A3C53837A541249687C17F11CA5967D3C
F3C1886F5108862A51A1460AA0A7C2C3E6240F63198330D0718264E23BD27799
B699956E57CF50E0A04284A04A772EED85F4304E258E09E9182969BA972FC7D0
C7AF4D126CFFBB984B72673BC7F1CDD4AB22C2412D43618BFB7F3A8D6E8CAD42
A294E4862379AA4F2FD2AB7D8DFE273274D6B7584B7CF2654484F1FE40465242
561B889A68D790BFE36369A9A0D086186E1DFFF29527E8E83165A5BB1D34770F
601787E286D03175BB4CF49F1665A2242C9D6CD1911BD9B2EC82D0DFF2218224
5F11127B087D104900A0AB6A62E39F03775BD28CF12A9773D44DE7A5A19B0348
275BECA525F5379235541CB802340A2569BD677BE7256FFD35A4EB3265E909A5
5156C1A9B3718F8436A1A62D856BA3F3739B434497927A5EB24857BC27F73C85
7AA017551DA180AC20860AB84BEFE973AD5139EA41FBB5501421426E607D8125
7620548E31ADE08B47DEA2F0F07663EC5E0CE60B6C792DEA6B8575AFC69E954F
89C709D4889D082E4A8610432FDE82D96D6799AED21AF638757C76C1D9F85AED
B9E91A44D9BA255609CA15C6F04A8C9628C36EA5A1A9097B2D8CAF6F049B2187
61272EF3F6B4EDFED7616DDE7399A6C282F84351857770D3396A6FFF213324F2
0A4BBA7230495BA6B2E8ACCD6C14C12FE940AB211EF65E6A99A1A4FD2C9CF6C8
984CADF6B33831C6540B68E641FE562C64D817D18F67770BCD5ABDBEA84372D4
144982B24439E6E5105FCFD32B162572BF412A7B6BABBB80A30FE3DF926F1C69
0FF1846ED15BCF2FBA48D19C73FEB02DD949EE9E12B1D48BA51B2D52680CB0C1
7BF39DBEBA6B7A1EB5621268F57AD252B7F52889B5258D7B14C365CBA904426E
FD38509844965594F44A7835E8F2D0BE542E1349D1549E670016305D85B3F449
D4D32A999BB4878E54C6E61A19BD93900597D66AF3FA59BC4E083A32812736AC
EF2FD58FCC53DEFB8672E0450D67DEBB2CC6C392515CEB2E1F164D104EDA993C
07D26E0AA4CA44DA026F49ADEDA0DF36F3E4B879FEFF57F7DC13BF00B03658AD
E550F85BE52E72E68D6940F64D24A4A16346204E5D023441E80092E23E2D8584
793FCCC9633F5CF344C970092280A92A99FD6275187C3A2026AF59AE67353431
32E4C14ED6CA9175AB307D0906B396F3A1DD256CB6706525A3FDF9961C6F4099
2CB32297BE0FB959994BC3E93446FEBC4DB608272488032A87CB8EC09391DDAE
51314902371B12BBF97E212DEADF3AF843D6CEB2CD880D383B159B5208B320DE
F5D6E2ACA5B6A211332FA0377514B42272E34365BCF7DE625873C0ACE060443C
6369BD152725729EF04C6D0AAB2B5B1035FA13EF8BFEE94C16E0C53645EF5FF0
FFE6A24EA93FDEEF9305E6D8B72C3F0D13223BA7C9C221DEFEB6F8AF30F68E44
14A4261853DFB26D389BE6AE0801CC58D56D93EF6B4379C56AD20E0E5BA9F163
463F8DD49C59C50DCDA87C4FE22628F1D15E8E8B1012AFA64964CE29854EC551
3696E3AD894B12C371724DA064D5B0F0B2514C8AD7E000CE278FCCE6F72DD122
10D884AB0F5E6410847589D320E81A4445120D3F4477C6EB2341AA8DC1CFA806
7F89FC63938A548B9C3101982BFDD2B36F32E89E34C5CD3748464F58970CEF6C
39EECF305F3C0455B15290C4174EF1B7D3A68A2606939F993310F1519247C93C
C411D05B909068EDD67B9F11F070381B6999248176E868E6A929405B37614C4D
FFAD7A8FD1A3BE06F7F9A7B1515A57FC3C065845A798E6B725D4F70DA4E402F6
A782A498E48B63ADA170BD73BDCE72D5AA0C0833EF08279B8FFD91325F5827D9
537EDFEE5189FBF27F2C7786EC5D3C2D43827D89C9C1E72BAA6E821D01210993
878C17486F0B4CB794007524FFD0B64E5C443907DB4D8787411BC8C4773AEC82
9AF820DF0E7A4E5E267AB3DA65D47F1FECD30523A66C3530F40705B772711465
5BCAD0CD027C8F700ACCE964E1C68A3B7EF50ECCC1F1302F8048D72CBF3555EA
3EA5C5B461820765BCACECFCEA327B675A821BF4B3A4BDD20B79CEEA795C1B7B
0AC9BB73CB472E0DC143CB83C29E88912AE17E4ADCF6AAE4CBB90F6679DF9617
09E3DB34731D094A98BB1B5B19A0E5ABEC5C20B4C354B760D933E26BDED33D38
24C00ADFA98BB5F97D9FA9C61D444C671CDE4DCB43ED516F805E1F00F873743B
C7EEE6024E50C950A9D6774D701951017A75549030ADE5BF2E5103F725DDBF34
0CABFC0EF0B1ECC09F2674541DE67D6729E43DC41496E193C9E15178A8496FD5
628CA09458810076A902A781B3B38EA67F74893F360FD2D6063E52B216CE4F0A
7181717899BBE8EFC3CDF9C6FB9674181AEA0AE1353574EF17A47FAAF409FF95
D39FABC4969304ED67A56315B7439A1BF560EDFDCC6564F18824474DE601E03A
96BC161D27B00E4DEB951E8F5D90C9531EA38E6BCFC2839596470D8D90241395
F20D2690B51AB8BE723007D055BDF8EAC1FAA376457D7655587AAF9F268AAB5A
FF7117026C577038C053F3483E6A2AE4271E740FB9E1051CC366B5B3AB0B99A1
4A594D35E24F58ED4ED95CD758DA816C4B137BCB98BACB15CAAD2B5232942F2F
D97E99DE77D4C65A90EAA0AB94C8339C59E3462A7CDFC671368B348B6DE8BC9D
ABC2F44A697F04BE2F614FEEEAFD9C8CCBFD27F0350E8A6D59CC99536216CED8
E40E568237322860C321BEFD4D3F861519318C3C7DFA0718D98F2697726D15B9
A4AE8272E6F83B5348BA83D89D25D3839F7690A774AB2B2B84ACCE0A574FBABB
CEBD92542EFABEEE20C09AF7F31AA3C58285B947296B002B02D9B025971AA37C
6C12FB8D9851AB59B1FD1F99EDB5BE20729D51CD16B70B52D81519C45D2ABA4C
954CEEB28D8919673E3ACED8096AA307A47206E174203661BD54180CCEEA45E9
A569B7E615212B3357D282164DC3C5D3EBEF0F246E1F3A7D520A9C59C1B628E2
89A240F2FF4BD564192A5D0DF4E860C0145D9BE15A9F872321CCE746809325DD
6A3711CC9B372251779101A56E7803656CFFA1A863B355EC5C22F822CA732C1F
B2772AB687E74FA0EC2CDC529368F9C06761CCE332F307BAA0BCD0477DD4A6F8
1B0086F740EF43C83F3DC50AAAB3E9DF658F0B89C3F4E2215664E2D5D1F60554
296AF5F26B22B7EBD439883512FD5E2E1F202D9A33220C5E3C04856C91471B56
2D5B9B433A87D390B50E1387063CDEBE0D1486CB2C2776C09F21CB76C586ABA4
7B3CA1C27B49CB256ACAD046CD862470F2B8143B8E40E1FE89D3BBB6AA46E574
F7F875BB171FFFF7677F2688EECE3861C23419E59E38D49B419240FEC6818EE1
0C44E39BB949B4914004BF715E957BF2EF7CA134DE4224984374111BFC92E20B
B0722FE0BF7EC9416F0260D94EF81810406FAC9C8BA41D275D7F79605F69809E
334E3D3405631652F96F70E3B80A4CB83909BE9433B8A25581DE2EB86C40DD6B
27DB7EC3448BD3BED84A872D2D4A1F13CB47D1E2D392883547173F3703E76FCA
E0111E9DEA8F9BA356D782192B70858085F245A4A1E74DF37C59CD67DE5C647D
D7CA6F5A2A1F0306EA17A0FE87E95081BD4CAF92A782D8128F2493C54D387B49
379773A96F8E48A441A4263ADF9CB343A7EAAD47B61539595EECDCB9CB0D5B9B
D89FEDFC2185EEEC6B6889A5CE811FD90001B9FD86F3F230D722AFD5EC754ADC
B4B3957E1B8AC57FFC161F3DFCE7608418492C22A4B2A9E8A5EA9F8937D26A40
C017948837C74EC2FD1CA6CF82AC17A6B60ADEACB6F9A3BF07B908A3C2E6A40F
7E237DF3CEF4F66F679F4B938E183DBE967F52EDB4DDC61C7D770E274C426B94
109F791F56DDD1E9DA55F0F5D0E9804665851A3F5FED211EEDD8A4A36571116C
DDF912A912F4CCF80ED14DAFD724454D35E40685CB9D318EF5596F7A336472DE
641898E5BEA80E99C73178D2152DD0F17FDB9DE0CCD8A6E846A47DFEC90247D5
81205B9CB97F5B96956D400F7187E8C4754E4E4913EAA6B22D07E1AF7B668B77
3E11EF7F7FA221B22BA2C4299858A4149740387951C57F4AAF426BF0C491693E
F2C17CB8025C29DD33D44F27E63C3C2D68C148AFF3D929AB9E4AA7F54069FEDB
8EF269147ECEF48F9E6C396BD97A330C45E4AD2B0833
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
dup 14 /delta put
dup 15 /epsilon1 put
dup 17 /eta put
dup 18 /theta put
dup 21 /lambda put
dup 22 /mu put
dup 26 /rho put
dup 27 /sigma put
dup 30 /phi put
dup 33 /omega put
dup 39 /phi1 put
dup 58 /period put
dup 68 /D put
dup 72 /H put
dup 78 /N put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 90 /Z put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9042537872831BF5F1F340A
8D3E6DEA1D9675E87B3425FAA0172DBEFD7C28E30906B9FBA65517C9B58FB6BD
E0D474E69BB90B0D130A32C4130974A1C961CF064A5BE8EC1056858553FFCF7C
0D78627BDE04E5D0B9F6F72F92B61A915DFF7AFE7DC3807891D039AECEAC3F50
0A09579E661D3DC3022206061E0250B09A05CF198DF82D4F28FCD2A85F717630
90740F78F242019C349B65C2A455597DEE127E914C372C6EA0E250402117B903
1D7D6FC7153D77458569B2E0E6FB978B06AAD616BBEB70B58E0BCAE1013D4405
873D2AA3C41309993563E652BCF2B244451D8FA1305BD9BC2C57BCEA7F065670
A5059B0B17303312E8B787E02152FA92480CDED118924A9D490B2BCBF9A560A0
D4B55DC4968ACE1019CC2840E1AA0596F8E8D4BF7119B047E55B0FA01C69B9A9
F79DA6C9C9B49EAD94943613151247423679B7A29AD2C71BD077306FB9EE0AAF
9AE4B268C8BEDF3CAE8CE885ED53184F9BF2F55AA05933071F536B7180F6301C
A04438DB5BE00037A8145A447088EAC4C1F2242AE1F189F9F11F05CCA337F4F3
E95F5AAC536FF42E48A1547A381B388AB2FA0105C317227E18D411FB4CD50992
E9C021CB7A543B33ADFBBB5343C97AE84741E803C2917F0608DE157580DE4E62
2FE5A256BAFEE7F5D6DBF47ABCE2FB41881CBC2460B3EE3D9145D4A22FF67C9E
F207B9467D4C2F048B86202DD5D9D0BB6F2BDB42D6429413CEFA15759D9DB2D3
88136A0460F8CEF25428C55EC2883E15EC33CB102D75F4F77055E97C7722C562
15D56CBD7D0AAF0C19835D1EB9435E28A042EF6A904C802E10B166DB9F211DBB
7C5CB9ADF458DF303C9705C194918A8FCA4AC2216DB27AF426A4B06F96A99C55
7663D53DE4C57802E3C53D7767AE64073014CC02EA3E6A7F0EBD27B11816A2EA
7DFC22B5CB487742FF660CA183F13A7CE1B0974EB46E944016303A630C1136FE
D3FF8BE51EA4D63BD64287B1CDF9936FD77B675D577734DE10257981D6DAD0F9
DE80702CB41147E4B24ADEE5ECA7A262F27890523B48C04CCC1AB0E5152E1335
0297F834FBACECF2B02AC35A2938F2DC439C2C269A4BF1DD66688F8D45ECF890
C7702EEFDD4B6F3910F352489703185C0030A70FA68957423098457D9DC1E372
0458ABD0C8655A35E14E2E365047AF40CA031E308EEE802A40DA5C7090DB8668
FEF1BB2BD034E24DEDFCDD85620F8C67C74934983B9D714FEA10B3E623DA8051
45098214887B9E86E53A0428E03B3A1E4F7D4A0242A9800D53068880546FCE88
ED3920D3BFFBF398AD1000FE925D8D15C173C4A24C89AF1EF63973D73E6100B7
C212FBB578FF3778C711F41F2D2FB2FDCE74CABB2A9CDE3D6C43BA085F2FA248
7CA3BBC0E7D12D54FBD196BD44E15831B372AE50A982B941624D73BD9E67B0BB
2F7C115D651F8ADA5B55855D043280BE6F15630C6C8E59924D0838E93CF0479C
6506DEF819EB829264C58E1B611CFEC5B76126740FDF02A085621CA300ECCB25
BFA20A341D81DDEA024C5E641847ED4AA186BC06C9CDB5553A8E58277B872CE9
40F21C9AA0584A0A23F7FCE997DEA51D87CABB6A81F8A46954794245DFA48316
381AD703595E127C0E626B66D51A35BD1498733F95427DE6FC9FC416D5F24E86
ADAD951773F5F6BD402F6EDE2B3A6FACD6CD77D92FE25F409B8B56BAEEFC0E0D
B0CC19736DB5679FDD48AAFC092556D9A5E8C6E671B439A2FEB8EC6092B8E2CF
CD0CD245BC8AB019E286D5D487144346D28526A6B907CBFCD54725A88B91BB09
B6CCB96BBF1B032A33B8D85EB4AF001655ED59545678824C2C4D073255409D52
63B864A7C4FFB19A7E4311314D3D4C68CE513DA1137DCBA1B64D62BE50D7AEDA
AA4B11226F61006B3D8A8B6B8C53C768A611F2B79A0315334A0D4F42DF58795D
ABA36458D6BA02620D786D546B38EDDE20500BDCE10D2FA952793209C7C059E3
AB687CF91B8CA4297783FF942D816CF2FAA0615532EAE52265379D2CEEE862F9
6D206B5F59C7287EFE6F1B9339969BAF4C66156997E1D002EDE7AFBA6FC952A7
9A80F18D79235E6DB778E1259074340979C034C437C1A813B93B72EE15D08BB5
5BC9B345DC1068D4FE92F8903F7D78C464D3E11129036C5C8F35DD32A6CAF73A
B5A061FD14BF39EEECA4440D908A5731939B21F9032C8C1AB227D39CAFFDA69D
0DA22D0C87E4A542140CC7A2E2FE344284C257054222DDCEBB1FD43E86005388
D6C116D8674B50E49924EA2047CDB0A5454E277A1836BB1383E6F9614AA7F9E2
C1248811BC3B9D229C8D7946BC575514BFB335AA4A2E3226BD35263106763829
189647EED238113588DEF1DAB1F42F1491688BFFCE4BDCE45E322CE9AAFEC41F
965F60A1F98A1D8B0F466E3BE65C534149A36E50E15D08DF97F98479D08C2E49
FACF65D38B9E0354BF81E44A61CB358EC1149C66DF8018D2C1BF9F9F21E8375F
67782EAC534DB4D616EE7D84B24FA39BDFCBDEC5118CAC0D5E1045490421EF44
4CF762AB6D40C8A59419EC98DAD9118655C8B1921CF5D65198C3980A1A10ED3D
23FC2806979992BE941677455099B8B33F0A3B19A5E6C0F1670FE4B7C963B9D7
702E377EC29C5C3504ED9778E87F28E29426EFCDA8E4498E9B0AEC1146D616E9
4765FCE18D848E50113CED3DC90DF98ECA0A711A995C8B3FD0D998DBB5D00FDA
3FF3ACED3874214E60D78C4D5B7B8F8DB22DB8FFECA8B1EA57EF47BA3535DA4E
887423CC834CBEEB7ACFA83802E1A08C19588FF20140EAFC4AAE8009F5591A38
AB7129999001C0A153EC8F08CC3F54AC7CD4A470A6DDA9AAE5C46F268FD4B07F
4D2D680A9E764E534C2CEB183763BE959DF8501F8D8240B5231357EEC1E16E60
6C7CD3B3DD9BB4CBEFD6C186922ADFCE61096FD3D08939AEB8F7A8C8677D622D
460701760E742FA9834CA9484D3F5A22E55407CD7E8FE10F37201A122D338F6F
1895CE16FF536D012F2932E7E4CD14E26DEF0FEEFCD6D83A9A466EBA829ACDF4
5E82B40847387D52033A56B59DC57D019320DDE9AA4FB11F6D633EC655DBB2B9
5B0EB490B7F45AA3FCE951188C6E1A9D4348308443E269CC5E81BD58580C452D
DCB011C7BD0161731DAD93ACAD8A4F63A1F3BE87CE1B83AB3B860A64D7023A60
34471B22A6030DFB9D5E5F95C6B802E5353172D110BD4F1AE4B4FCBBE5C628EE
51390D2E6E2EBF46BB6F6B7B652D882B4B2D2F5C809D858AE184CF7AB53FBEEB
FB5ED6259004EC4AEDD6D175AC93688892A01A170971B96AB9F997DDA6696F0F
E5ED79293AFE3352404F86775085E8B524892134266C1321AA3FD1EEE78A3AEA
1541009E6EE331B0A9B8E2EB3393176281FB243259541560614FEA27190A1A05
6B85BC8BCF86C53C16D34888A41F10E2999FBB78D0F6EB15218C3E7C158CDA38
5B553B48EEEA7FB4E157D61CABCB4BFD5CBD3C55EB79592633668FD0EC5075E7
8128FC2067B3AD1F9B70A1CC85ED9EA45242BB3B9464286D7A1CF895D76074ED
43899CA14F972D825D4AD55B5A67CB74CA55677DD9846250062CC2E815BC1069
FF84029969398CC509222B0840F21C0029D98C595A91A033E3FC1A296841394F
A013DE6390328C5CDD3092BF2C673593FF8F7178F2B913AA50520D052661E1F3
284D3FAB50CB0D82F3E8957945A8BE6A4321FD774EFD558DAEB6AE1EB33BDC48
1032F28458795909B5B1736607BEDF11E2AA9B540696F3BC41F70D4F3299494A
81E6305D1F8048053F1D61861B5BEB9E2856211CA9DA52B33580937F527B6D10
03C177B1B1CA52B3E9093F1C4B40242FFB51730E24C5EC4A26166707FEB740AA
114776E6EA3D7C98E757E84D19FBDC252641B99083A674DA12803F2CBBA4E3A9
3387E3476713D58FCE49D68486CB2F5C90CABC94061585656911A59A0AA084FA
4FC21024A3CD0B8B8E698A2E42E16E1E63B6E133AF75AE568F91D77DEFDFDDAA
B8ADA2F8294C091F492584A737B990542ED0D146F6BA52A46DE38C0AFD3ECEF2
CCB7BFAEE46118DD59812775C0EFA272DB073B2F3B40E384D1A73D7F51C61230
7B4A7CC5A2E4963436849277CEF73D82BAF9D40EF1F622C7557A3D8A55EF7B08
2B32C9D87D49FA4EFFA67824C4ECFBBAC7ABACBA99F7E1FF114E9A337909F7E5
69CB9872214A328509D9E97574456DAED431F278E9125822A69E59A83A3054CD
F5DC1BDBBF192EFE6C8DB243D4576DF4DD5973865DDBF35E7A98BF81FB6DDEAF
CEBAD9A3335AFA31318EDB91C796157A282D8B7FF1856936D1F9E0B8BEECAE2F
60D634F27A4E1EAC8F6E0DB7272EE57812551610E33ACFF701CDD6B5629921BB
DD91F57B3D8A12C704FA1007CC77BFDD2DD67E616ADC2D3588558C9003106CE4
F746DE59112B27488B04165EE1274E500FE8FED0A2CF6364A24DB9A9478AAB24
06A89917D9B1CB01596B9CFE66E476FFF8C88645BF60C4BCC020803BE89C0BED
105B1000585DACE64F0EE6B57D233C582ED9B99EE5761778FAFED7E7840EA5A0
D2E74E97067712AAE6362C6A239EB38D3F5E8CE28C303670AD0B045BE3B0B30C
2C1D0B7BCA1818B08AC09A9ACEE1F1A5EF87C2594341310E4136B14F64AE15D1
F1DF9C27E27660600CB0220F78637937F13B4281FBDDF86C511692D03AE29BC3
10A2E41B64384055A83C537F31806D7BF2FEF9C5EA3FDB4516B4D6A9E067DE43
53C7576DDBD2EDDD393B29D335FA6F6A8FF459143D8322E57401721D75A3190D
CAC2C17452F6016CDF933D73157A0AD1AC5B057700D5FE9911D5A8447F062292
33AEB5664830B33AEFDA5E4066B293B8A8D3B01F6C6CD1911533C86A775292E6
AA4A9162AF5DBCAF075E9327A37C5F79EDF7ED8B84D40161DABAB5250392F232
BA99D53C9FB61D3DD8D3C699BF9B8B6F6E0C59E0F2A95D09F96216D2EF98B359
443DED96756E97D1B722F704F47C0E5972E78DC1729DE1172731F11DAC3017AF
1E72D00056ED6CDE6B9E82D69F57E717146FC79B224079DF27707716B7C90A27
4CB4B0E9D622A71033344741514428032E5D3059FCCDC38BE9448A33CB089A99
4347625849218699DB0B9B0FD9D8326228417A5868047ADD21D2927F70890825
D3D54240BC428DE7A2C0EB01BDE08ABDC35472159915F3D4A3FCACEF542F7FCC
9F4DA3CBE86BAC0E6F8725826D50E5D0FAF0DE8B12F7417A1A5F5B55B2F7B559
A97CCDD717DE0E84F223ADDE1CB6B706848C01C0503A856FB79549ACEE9A0656
1FAE61DC383288AFBB3BBCF841A7F2D0A96D3446D87993AF7318D89D51FF18C8
C6B5A4A9DC427C966FBC8C368C7B5AAD2B0E6769C7E72316C1403F15FF67D8BF
D8A4028FBDABE0C46D56D53637826168663E38B0785CD58C3A02A0ABE93B85E6
22DF33FFE9F8BF90F6A1C428554DE4D5ACBCC57259FDCF71E23118C0B8CFE0C6
F896A3BFBF1F351668DDD57C504BF13D41B95610596413F6227700D1C6D0DC14
2FCAFC2A753FAA71E6647B743A1B94DC19C0F631C081529F6EDC7F3B8DC2EC8E
FA145556C3956FCEC66A3737D7FB123EF422B78803A5CA14FF660F92DB864B71
5FFDAD2B9DBC27624F2AB7EDADF36273C6F9FE9BFB21668849B46CB05E525E27
E84E8336A691DD9ED5954678A361222078F0058AECF8482A3B4E9EF8A23130A1
122B5DD53079E2313387BD231C79CD4C7F6CE361B53BB0D527DF11DDC6A408A8
FBAF77B7A63B63130A8AB3DC5115BBE57D0390279E93AA707DD406A855353893
1A08DD88C7C0CE62204FB1B9B9B7ED1A99533011F881E09079EC89F3F3BE91FE
F29CE5FECA10E3740661CA3AEF8F0BE583692DF4AC000B7C205AE082B9C3EC82
0F8286BACA68A499F45E3AF5AEEE109C98E25837ED9990B7A2ED49E90CF97843
AF348EBF6862E4AF6A97674DC9E1E2B03AC6E82607EF3DE179D98C7FFF970834
7A0912B21A2E9BA0978E07B318BE65DE5FCD612F587530D12214A3628E266A97
AC4191E57413C9B0359DECF8ECE470ED98296821DC7B150EA0F5285D470DA7A3
D93F0AF00DCA7385059C567056AB75BD6C18DB899E05CFC7995260C4CB21FA66
FAA5CD13263CA5BCCC01F6131635A34480D8F22ABDDE56A4D7A7F3FB79F5A0B6
971E935BD34FFF5D2B1A495E830E875143FE09B01F5AF1CBEFD0796E36A37383
D0AF8AFBD4549903713FFEC949764DF3F61E8B4F00D5ED0A31293B1F41445009
DBEAF013CA880BDA22E9483564D898959B9700C8CEA26CFDFA56A1D518E490C7
1E2E7B9529430EF4B198AD82F3CFC91863D36E3501042D88A98736CE28DAED73
33AD27E757EED6F3ED4B55079A8DACF6C24E65C82CB24EB6A6DD3E9099CD8C0C
E8B371937169ABDD27DF1E62B73591D59D4B37893A43D2A2E0DEA513FC83BE2B
6C5A6F8D7DE0FB7F59CD7BC0420C142B5E419D6D829953D15FFCF99F8DC1097B
97C819D49741349FD728C0FBF83972A52BA29680C1498843C0D96A69A3D098BD
759BFE54B3E9D8D44F36317964866C11CF018D0EE76D6856937535757230E974
808A65CC060001BA73730E1B45C927AFA958FA2E08793FA88EE3DB77884A8C43
8EEEA9E7F68B115B949430FAEC72BB34216E99F1D0372D9C7F4DBF832A9E05A9
2951C60FFCD0A85D5557E12FBC7C93EB78CD7F6E19281602EE400406BB5AAD3B
296FF51B80D02DE261BD9DB6AA5600EB683E97288A1EFC5D8119EF5C390DC46E
91C8D71F5ED3A699BC8C6B58F9C0D0FDBF2A30957836DCB3784D2A55EC1E04D1
C9E8BB40F62582253525CD6F5F0B6A7E7F69FEBFFDDE1F5835C04883A7C7970E
F5F13443A9150F8AFD4825FA7F8ADE128D987DE32D875B376ECF86CA5C9799E3
A4E0AFE25D18BED704FC180C1727959EE07AEC5914837D000E53A2E56BB1AFC3
4659BF9C9799BAF636D3BCFD51D9165A32271CB52B6B9920805A6B3F1D5B3AF7
4268E80A858121279D4C9276084B30D0723F2DE70B9D11D655EFF92424E3D841
E83A016EFE08A11B2635C2D2A2F554F28186E4F5818FC4813179CF886FCF9C50
8FC418A96942C720C3FA91F879C5F4B21019B3F771EB81DD2D306ED076C0608D
C4CE5A03CFDE26A047123A30FDC628FBD1EEE2B4BC1477BB01F501317CF73DD0
866E4956886FBB8707810B707B0C04C665574344C8F0EFAF6AC9C18D371011A5
A7B11BCBE848C7D5A6C2A771B61CAB3622DF2A2DA0965EB31E1D4BFAA13B9F9E
EB83D0212D91C929CD8D42D90C56159AEE1F94D869B259DD93A71D2101850ABC
C22900D738FD0315465FD3808D186DDFDCDD9D37367BEA41C04CE61B4D409C06
D1BDDA3BAF852573E22323A49B8D1A7D299135508D42E4BF7CEB22C1491B68F6
ED1708BEAEE11F6E61D073F98868243455F043E30B2D90CDC1ABE3189526F40B
2F5B728C60BB36BBF96444D1589529946517BA3D776F60EC34253FD4A522E33E
00AC49162FB4B025C9F5EF91DECA5DDA6005353DAEC1FBAF8DAB660F5AF7FD97
F60C040A82961B5BCBD6A86BD93203B684070E1C3D75A140DEE6B1C55D5BF69E
81504154C4D7ECFF39E714752AE5E4349C7750AEE9F6AFA26B949D0281409E93
F4A183102CDAD596FEBA7F6B05D9377760C51C4A645CC682E9BDF48CB7F28108
A9661F8F75C1CE42F666B25E78F7E3A57520FC88E3478F7C1B44EB60185EF7BE
5DF52CD6E4A6789A68ECD0367B109E2B4ED6DE10A23FBB5E84CC07E62821C6F7
48E5CB6666DC2A2323ECC2089E7825E417B01CB94396ADF641485789BE7B4EE3
BB14FBF4799C25B0B3DCFDD325B88AC4C3FB1B419658EA5D1FAE36B089069344
9F6EDFB5D551C22C869D1DCB0AB1873B1F75CBE642821067927EC46753C795B3
7EC6DEA30A823ABD789FDE1F1746AA08AEB5C800FA46BD5A2C1B32778C584214
888D6086E5F7B5780591A32007FBBD154920FE008AC175EC85EB748151AA51E2
5B22ED67B895C8D029F06BC9479DC7447ACB61B5739AF0EAFCDCAF68FD92A54C
A5537B12D43203CA83BB282ED6C537C2109458186BEC6C828C88BF5D8619AF0D
57581E1497810A709D4B17C84F2BB74BE5004CA2DCF5F05C0BECC267C70735EF
3B2CC34F49BB627DF98CE6BF6CDAC211E62E0491459B75B754234CB7FADBACA0
C916DFC40F3F686BF6962ACD998DCD6E24399BA0CE0ED4FD1024711808D6B95F
9F3BB5C73D09749E2B0F8C1A44B1B2B978B22471838476EE640FD0AE1A44F020
50205F874570AC0BB61E186C598CD9AF2DC5C3FA534A3E051755F6E57417CAEF
8D22A6C62D2D2B188CD3B5080062322FE19C027AF986DAD1D10B31B638E345E7
FE5F50DC4D98B4F02D47DA35B3E7404213C6A94A7AC44DC312231502878393D8
D4A817FAA3F04B7E0BD75F4FC534D052E9380215A83CE110A765C93C9FE92EE0
FE6E8F95B78F47783F69A3633C5A2CC3CA5047928F97B90D8DD4BB56E06CDBB5
CE875E6F9E0CA57C9D0804F1641BF25659F7EB9C95C6A29F585371BBA50C6A67
F13A6C420F53DD1BA44D438FD8CEAA0AA3737D397F87C12F6DDCC4E8F17AAD1B
62FE3BCBF8D30AF12CD2428BC2D44D83468D801A76226C288E36E30DB6CBE2AD
F2C96065EFA0CCB468521802FB90053FBA769F8B5ED1B777C7698FA34B687517
C0A40D03826C6883D31AABF72893DAA0819941066550986130F8B6417A258120
F7B6CA8865063FA7C0A9DDABFD176812DD82A5067096BB74C5509C2394A82FAF
F9621E7F057912EC138D309C0C1F821A3AF23B93E4CAF504A72C00CE7A01370E
B5B03D6E9D0C9624A3B8080C266E06CE4CA8F2046E1E8C4BE218C24247C8654E
3983685098D0D393F9EDE3DA66BC870E7923DD4CE053E9952C26FF440A2B53A9
D42270AD5B6DC764101CD4731EE1E59D548DCF7591FBEBD06862851B49AE12BD
A51CB16FA8DACDF57E9B4533A69917FE7ED8D5CE3EE7FBC10B74DF64E30DC4CF
F0094340C16CEAC05ACC971F7A7D2FBF43AC36B76656E496836B022DB5CC6486
02445CB3678312A74F916BB5CC8C5FE7C8C8803CFCBCCA2BA60DCF88248995FC
570F097FB10FD7231B3CC5F0D5F56B0AE51FF0AB4A7DF4C94F1ADF5795969E78
79FA6079436A4DBC35D5E582F2B4DD034EA0476303F9CFB9977EBC84C692D426
3D5900366A2126AA881117D18D43FFD819F43F3B9E1772B53CCF5B922CB71B7D
D250065F3ECA5CE6BC488851501DCC72FEFE71FE3A1E08FA27145DEC274F40FC
25689255A37AAC5A7033EB0C0BBEB9525DDE059C71B77C05F796880CBB37047F
798D6F368AEDB4E7CEF7A14B25247483D816E206F341C85F28529BE2D1BA5221
2F75F2CECF8BFBA3E5D51DFEC8EB84840F1611D8009BB90C29A04F87D15BDA7A
A5D4DE2EC76B5F1328243A5504B615CE6563E4B29A52EF9E3BAB9ADE91360BCC
D2F85E97C2B13A6F4A73EB9303B39D9B3238758A19661381D5687656E7D8076F
07B813E77A5E382806C2750CC2431C9E8A40BDAD29EEC5F29489219444FEC6B8
AC44D585ABDF0E626A6CE517364A9EA7CC008D42FCBECB2F6826F0FBCF714085
13D19F012E65724B0F6F5D7949CAEB215F60A6BF80989033FE22435A3FF4A4EA
DA2F03557D72DAB251B8991AAC606D56BFBCEF2EA438BE8B70267E48BB70C9CE
9C0BE22F70C6C159EC261F2B7D9091961CBFD48A83049041F7DA471CC77A0863
93E1EC44FA2E3C24A9DC92A1498275A6E25B05A450E514C3FE762AA0597633CB
287FA513F185D37113942C5E7E5E2CA0C0FEE9311B3F235A7300E2F687FA1017
E730309098BE0A69A4BE39F1423DC805EA5EFD45D5C977A9F87000EAA6E30072
26697A296584551CCB1C88B0331839AD8B77DFDAAF2F15705178253349587D30
20654809BB9DF371F1909488B3C1295FB3228D673964309D03A60211FDE5FA9C
C30B5F1C812B950E294265D56A5F539225301CD88320D850ABA2F590E20ECFE1
87B83CEE0288F3F45DC0E6A42ADEA024A3E86CB22DC43546E1EA6B109C775A79
5AC2532AB00FA7A4B7F54F85C7A69E2D8B92CA064487E08E49B1D6E316E2443D
7EB5C7FE54584D6A65E73569D5AA736A4A7DB8F30DDA72C70D59745531BCEBE0
095CF48F4B3580A3743BD2F42CCBA2BD3BF96EB33A65B961D51A394455E9A926
E0F8A928EA81C38745611B9421CAF0E1992E5EAA0F5346FD4673ECC5D9FE4698
DF2C7E33DBEB733584203EFB1C800CC17281563DBFFD3B8CEBC9CE352E598265
F5F134541F382738080657AA362E9BAEAE71AA2D1300CE836B04AC0B683D14E8
5799485089D10107D01243B9673FAE0CE598FCAB9ED590E79324375CC5C77096
437BF93C35C9B6D4CA8011EBF4956C033B5743405BA89F0140FDF8E75542A818
9F0AEAFD0C7D829427D8C99EAF53D554351CEC686E205C841E4152D78ABC2538
29582B422C4C544F441AD84A160097EB0AC25526F6D0AF24033BDF53ED3120A5
CE60F6A7A3446FD9E0469B10AF205A5364471471069EC73045A7E3CAA129946D
EBF293B286037F45CECC51D571071F1613703F1FD1B6CF96371DEB0A75E87128
375144719A0A6A425D20AD33A6A3BFD68B0BD3512238422A102A96EE646C3EA3
C8E6B8327ADF144C6347EF41484236D9A7D646BBB11B23307E14CEB1F3E1D8B8
5779ECD098C33ABE67E3AD7AA47F0743C870ED5AC1E7406FF1CD1A8601DC3495
6F0FBED63DF7AB0F18595E5B71C982EF492AC74786AA897FD4A08050D28DF1ED
BFEEFE636FE1D4F2EBAFF821EA10AE80CECBD5E7AD8379C420FB0F40E814D19F
CA1F9B6C312058DEE9776438BCCAF0FE96CDC6F12F71997669E7B0ACAB21D993
ABDF852FB3DDA118907421D173B393D6FF154E4B4DA2987CDEECDB6A5F1EE905
12F836855DB1DE8BC8CE9D5CB2A5DD811567F0F2D56FF210C71645E4D18E149C
55D3AC4CF48BEC8920165DA99FBCE93DB4F699F2689D5B0F3162B445527D2A8F
D9BF8CECC7E79D3C152075120A7E3F5A3A215EC35E52176E862F058C4583E59F
C461E96BA045484B54D2B79D37A578378922C6D268BA351A33A3B59E0A9AD555
B82A1102AD93ED194EE351A363A842C541E064A2853BDD2E015C3FF8D98A9AE6
3524F3068203896C931C25383573ACC7A44919E1FFB8BF7C9147311C5D99A570
07B1B86D0DA4DAB76887F5EDB99F88DC3820850F979A0E633A4F63477389DD9C
A35C43BFB0DBA894C193C9AA423E6A5FEC4CA44433BE3C485F0855FF4F6F0A73
39BC70857B89D2B8E17672325BDE645DD13B883B0375166572A744DF327B7C2E
12DDDA3065E66387621164207C973F4D4BD8A59237D4ECEC0DCAD509AE85BE16
76AA5E31D31EDE25EEF5A90A133D8FE69BF8CA7C8C1D2CCC5C873C7ABBAD5DEB
5E699F64073AC9F12BA9F319B09A9BBABC855013A03798D7742F68E684B6D8FD
75DC339106C1E7322117300A30CD7AB167F82522A898B438423AC72017B134F2
7EAD2B969F31781A8AE4340590155A961934A9D332A875C423DD685F7919A4B7
24026CDD589B66497D6525A924935C8BE653A5A4313994CF5F15A9A3A841B584
394BCD798A566CA4A031CE80A3C2A078D0ABB305448CDEB7CEBE0FD67069CB3F
C13CB1A8AD214A03C92C064DDF0530420109AD4FB62D2712EA0D83697DF7781A
D70BDD4597FB8240160D049D3A60C350A451F106731BE34CEC4D5BAA44FD5E91
EBADCD41FF17FC5BF320A81909C94D6694BD0DC234DE9964A91FB00FAD5AD31F
33972829F28F2103414EBB136663ABB52069A6C3C369220F38E2AF214F51EBDF
91A342C4F6CB09BEB8FEB6B0E89251B1DF0B1A9C508B27796506012C696B6F76
A1D53AAF4BC9E8FDBE847D185DBCD1C21304EFB6C4FC5FDA8B5C88A561689B0C
39D139
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 32818368 46617000 1000 600 600 (PHDbase.dvi)
@start /Fa 139[30 1[40 1[51 7[51 2[40 3[45 29[66 3[45
6[45 45 45 45 45 45 45 50[{ TeXBase1Encoding ReEncodeFont }15
90.9091 /Times-Bold rf /Fb 134[50 50 72 50 50 28 39 33
1[50 50 50 78 28 50 28 28 50 50 33 44 50 44 50 44 9[94
72 72 61 55 66 1[55 72 72 89 61 2[33 72 72 55 61 72 66
66 72 1[44 6[50 50 50 50 50 50 50 50 2[25 33 5[33 39[{
 .167 SlantFont TeXBase1Encoding ReEncodeFont }56 99.6264
/Times-Roman rf /Fc 205[35 1[35 48[{}2 66.4176 /CMR8
rf /Fd 141[76 98[45 15[{}2 90.9091 /CMSY10 rf /Fe 134[40
40 61 40 45 25 35 35 45 45 45 45 66 25 2[25 45 45 1[40
1[40 45 45 57[30 39[{ TeXBase1Encoding ReEncodeFont }22
90.9091 /Times-Italic rf /Ff 255[55{}1 66.4176 /CMSY8
rf /Fg 133[46 1[55 1[55 58 41 41 43 10[52 32 1[58 4[29
52 4[79 79 3[73 58 78 79 71 79 1[99 1[82 1[40 82 82 66
69 1[76 56[76 1[76 8[{}30 90.9091 /CMBX10 rf /Fh 129[45
31[45 52[35 35 38[76 1[{}5 90.9091 /CMR10 rf /Fi 133[33
35 40 1[34 41 25 1[32 1[36 34 43 2[37 1[24 1[34 1[33
36 31 30 10[67 8[56 1[48 4[55 3[50 1[53 65[{}23 66.4176
/CMMI8 rf /Fj 133[42 45 52 65 44 52 33 43 41 41 46 44
3[47 1[31 52 1[45 1[47 39 39 7[62 5[53 56 69 3[73 5[76
3[75 9[25 18[59 5[57 2[54 2[52 47 3[55 53 2[43 45 1[37
40 1[51 58 11[{}40 90.9091 /CMMI10 rf /Fk 107[40 26[45
45 66 45 45 25 35 30 1[45 45 45 71 25 1[25 25 45 45 30
40 45 40 45 40 10[66 66 56 51 61 1[51 66 66 81 56 66
1[30 1[66 51 56 66 61 61 66 8[45 45 45 45 45 45 45 45
2[23 30 45[{ .167 SlantFont TeXBase1Encoding ReEncodeFont }53
90.9091 /Times-Roman rf /Fl 134[42 42 60 42 42 23 32
28 1[42 42 42 65 23 1[23 23 42 42 28 37 42 37 42 37 11[60
51 46 55 1[46 60 1[74 51 2[28 60 1[46 2[55 1[60 8[42
42 42 42 42 42 42 42 2[21 28 45[{
 .167 SlantFont TeXBase1Encoding ReEncodeFont }46 83.022
/Times-Roman rf /Fm 87[30 16[91 45 1[40 40 24[40 45 45
66 45 45 25 35 30 45 45 45 45 71 25 45 25 25 45 45 30
40 45 40 45 40 3[30 1[30 56 1[66 86 66 66 56 51 61 1[51
66 66 81 56 66 1[30 66 66 51 56 66 61 61 66 1[40 3[25
25 45 45 45 45 45 45 45 45 45 45 25 23 30 23 2[30 30
30 21[25 13[51 51 2[{ TeXBase1Encoding ReEncodeFont }79
90.9091 /Times-Roman rf /Fn 166[72 72 100 72 72 66 55
72 1[61 78 72 94 66 2[39 78 78 61 66 72 72 66 72 8[50
50 50 50 50 50 50 50 2[25 33 45[{ TeXBase1Encoding ReEncodeFont }32
99.6264 /Times-Bold rf /Fo 135[42 1[42 12[18 47[46 46
1[46 46 46 46 46 46 46 48[{ TeXBase1Encoding ReEncodeFont }12
83.022 /Helvetica rf /Fp 135[55 78 2[33 55 39 2[61 61
4[28 1[61 1[55 3[55 11[72 1[66 6[61 8[72 1[72 19[33 45[{
 TeXBase1Encoding ReEncodeFont }17 99.6264 /Helvetica-Bold
rf /Fq 138[51 25 45 30 2[51 51 1[20 2[20 51 2[51 1[45
51 51 14[66 10[71 1[61 66 21[25 46[{ TeXBase1Encoding ReEncodeFont }18
90.9091 /Helvetica rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: b5
b5
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -38 696 a @beginspecial 0 @llx
0 @lly 596 @urx 171 @ury 2267 @rwi @setspecial
%%BeginDocument: Text/tut-logo.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Untitled-7
%%Creator: Adobe InDesign CS4 (6.0.6)
%%For: mainio
%%CreationDate: 13.5.2011, 16:24
%%BoundingBox: 0 0 596 171
%%HiResBoundingBox: 0 0 595.2756 170.0788
%%CropBox: 0 0 595.2756 170.0788
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "InDesignDefaultInsertProc"
%ADO_ContainsXMP NoMain
%ADOEndClientInjection: DocumentHeader "InDesignDefaultInsertProc"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -170.079 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 170.079 li
595.276 170.079 li
595.276 0 li
cp
clp
[1 0 0 1 0 0 ]ct
125.435 91.6878 mo
128.347 91.6878 li
128.347 78.1071 li
132.038 78.1071 li
132.038 76.351 li
121.745 76.351 li
121.745 78.1071 li
125.435 78.1071 li
125.435 91.6878 li
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 nzopmsc
f
134.003 91.6878 mo
136.582 91.6878 li
137.96 87.3315 li
143.184 87.3315 li
144.518 91.6878 li
147.608 91.6878 li
142.273 76.351 li
139.294 76.351 li
134.003 91.6878 li
cp
140.583 78.9298 mo
140.627 78.9298 li
142.695 85.7091 li
138.472 85.7091 li
140.583 78.9298 li
cp
f
151.641 91.6878 mo
153.797 91.6878 li
153.797 78.8629 li
153.841 78.8629 li
158.354 91.6878 li
160.577 91.6878 li
165.089 78.5515 li
165.134 78.5515 li
165.134 91.6878 li
167.713 91.6878 li
167.713 76.351 li
164.023 76.351 li
159.71 88.8649 li
159.666 88.8649 li
155.242 76.351 li
151.641 76.351 li
151.641 91.6878 li
cp
f
173.392 91.6878 mo
176.304 91.6878 li
176.304 85.0194 li
177.037 85.0194 li
179.46 85.0194 183.128 84.6644 183.128 80.5961 cv
183.128 77.0625 180.594 76.351 177.037 76.351 cv
173.392 76.351 li
173.392 91.6878 li
cp
176.304 77.9742 mo
177.037 77.9742 li
179.104 77.9742 180.216 78.4407 180.216 80.5744 cv
180.216 83.0412 178.704 83.397 177.037 83.397 cv
176.304 83.397 li
176.304 77.9742 li
cp
f
187.291 91.6878 mo
196.45 91.6878 li
196.45 89.843 li
190.203 89.843 li
190.203 84.575 li
195.939 84.575 li
195.939 82.8192 li
190.203 82.8192 li
190.203 78.1071 li
196.25 78.1071 li
196.25 76.351 li
187.291 76.351 li
187.291 91.6878 li
cp
f
201.236 91.6878 mo
204.148 91.6878 li
204.148 84.975 li
205.06 84.975 li
207.349 84.975 207.772 85.9976 208.328 88.798 cv
208.883 91.6878 li
211.795 91.6878 li
210.928 87.6208 li
210.55 85.8416 210.239 84.3752 207.972 83.9525 cv
207.972 83.9086 li
209.35 83.5529 211.173 82.7302 211.173 80.352 cv
211.173 76.8622 208.127 76.351 204.726 76.351 cv
201.236 76.351 li
201.236 91.6878 li
cp
204.148 77.9742 mo
204.726 77.9742 li
206.526 77.9742 208.261 78.1289 208.261 80.5744 cv
208.261 82.8192 206.794 83.3526 204.726 83.3526 cv
204.148 83.3526 li
204.148 77.9742 li
cp
f
216.385 91.6878 mo
225.544 91.6878 li
225.544 89.843 li
219.297 89.843 li
219.297 84.575 li
225.032 84.575 li
225.032 82.8192 li
219.297 82.8192 li
219.297 78.1071 li
225.344 78.1071 li
225.344 76.351 li
216.385 76.351 li
216.385 91.6878 li
cp
f
250.236 76.351 mo
247.324 76.351 li
247.324 86.4641 li
247.324 88.8649 247.013 90.4655 244.657 90.4655 cv
242.434 90.4655 242.055 88.8649 242.055 86.4641 cv
242.055 76.351 li
239.144 76.351 li
239.144 86.4641 li
239.144 89.1988 239.721 91.932 244.657 91.932 cv
249.659 91.932 250.236 89.1988 250.236 86.4641 cv
250.236 76.351 li
cp
f
255.716 91.6878 mo
258.094 91.6878 li
258.094 79.7521 li
258.139 79.7521 li
264.363 91.6878 li
267.253 91.6878 li
267.253 76.351 li
264.874 76.351 li
264.874 87.7315 li
264.83 87.7315 li
258.895 76.351 li
255.716 76.351 li
255.716 91.6878 li
cp
f
272.913 91.6878 mo
275.825 91.6878 li
275.825 76.351 li
272.913 76.351 li
272.913 91.6878 li
cp
f
284.702 91.6878 mo
287.703 91.6878 li
293.016 76.351 li
290.437 76.351 li
286.458 88.1755 li
286.413 88.1755 li
282.501 76.351 li
279.477 76.351 li
284.702 91.6878 li
cp
f
296.649 91.6878 mo
305.808 91.6878 li
305.808 89.843 li
299.562 89.843 li
299.562 84.575 li
305.297 84.575 li
305.297 82.8192 li
299.562 82.8192 li
299.562 78.1071 li
305.608 78.1071 li
305.608 76.351 li
296.649 76.351 li
296.649 91.6878 li
cp
f
310.594 91.6878 mo
313.506 91.6878 li
313.506 84.975 li
314.417 84.975 li
316.707 84.975 317.129 85.9976 317.685 88.798 cv
318.241 91.6878 li
321.153 91.6878 li
320.286 87.6208 li
319.908 85.8416 319.597 84.3752 317.329 83.9525 cv
317.329 83.9086 li
318.707 83.5529 320.531 82.7302 320.531 80.352 cv
320.531 76.8622 317.485 76.351 314.084 76.351 cv
310.594 76.351 li
310.594 91.6878 li
cp
313.506 77.9742 mo
314.084 77.9742 li
315.885 77.9742 317.619 78.1289 317.619 80.5744 cv
317.619 82.8192 316.151 83.3526 314.084 83.3526 cv
313.506 83.3526 li
313.506 77.9742 li
cp
f
333.901 76.5291 mo
333.322 76.4175 331.7 76.1068 330.077 76.1068 cv
326.765 76.1068 324.897 77.5959 324.897 80.0631 cv
324.897 84.9082 332.167 84.8417 332.167 88.3089 cv
332.167 89.7536 330.744 90.1762 329.766 90.1762 cv
328.032 90.1762 326.32 89.2645 325.143 88.5313 cv
325.143 91.2426 li
325.698 91.3986 327.454 91.932 329.299 91.932 cv
332.589 91.932 335.079 90.7096 335.079 87.3758 cv
335.079 82.6194 327.588 82.4409 327.588 79.4407 cv
327.588 78.4846 328.455 77.8622 329.677 77.8622 cv
331.455 77.8622 333.367 78.6406 333.901 78.9073 cv
333.901 76.5291 li
cp
f
339.665 91.6878 mo
342.577 91.6878 li
342.577 76.351 li
339.665 76.351 li
339.665 91.6878 li
cp
f
350.298 91.6878 mo
353.209 91.6878 li
353.209 78.1071 li
356.9 78.1071 li
356.9 76.351 li
346.607 76.351 li
346.607 78.1071 li
350.298 78.1071 li
350.298 91.6878 li
cp
f
363.689 91.6878 mo
366.602 91.6878 li
366.602 84.5085 li
371.625 76.351 li
368.825 76.351 li
365.49 81.9744 li
362.267 76.351 li
358.91 76.351 li
363.689 84.5085 li
363.689 91.6878 li
cp
f
390.051 91.932 mo
394.541 91.932 396.452 88.7097 396.452 84.019 cv
396.452 79.3295 394.541 76.1068 390.051 76.1068 cv
385.538 76.1068 383.648 79.3295 383.648 84.019 cv
383.648 88.7097 385.538 91.932 390.051 91.932 cv
cp
386.716 84.019 mo
386.716 80.1522 387.627 77.5733 390.051 77.5733 cv
392.473 77.5733 393.385 80.1522 393.385 84.019 cv
393.385 87.8875 392.473 90.4655 390.051 90.4655 cv
387.627 90.4655 386.716 87.8875 386.716 84.019 cv
cp
f
401.468 91.6878 mo
404.38 91.6878 li
404.38 84.575 li
409.826 84.575 li
409.826 82.8192 li
404.38 82.8192 li
404.38 78.1071 li
410.137 78.1071 li
410.137 76.351 li
401.468 76.351 li
401.468 91.6878 li
cp
f
425.631 91.6878 mo
428.544 91.6878 li
428.544 78.1071 li
432.233 78.1071 li
432.233 76.351 li
421.941 76.351 li
421.941 78.1071 li
425.631 78.1071 li
425.631 91.6878 li
cp
f
436.244 91.6878 mo
445.403 91.6878 li
445.403 89.843 li
439.156 89.843 li
439.156 84.575 li
444.892 84.575 li
444.892 82.8192 li
439.156 82.8192 li
439.156 78.1071 li
445.203 78.1071 li
445.203 76.351 li
436.244 76.351 li
436.244 91.6878 li
cp
f
460.57 88.5764 mo
460.014 88.9982 458.703 90.0872 456.769 90.0872 cv
452.679 90.0872 452.612 85.0194 452.612 83.2419 cv
452.612 81.1964 453.056 77.5733 455.635 77.5733 cv
457.503 77.5733 457.88 79.3295 457.88 80.5297 cv
461.193 80.5297 li
461.193 77.8408 459.436 76.1068 455.813 76.1068 cv
451.167 76.1068 449.544 79.6631 449.544 83.7301 cv
449.544 88.0647 451.39 91.932 456.235 91.932 cv
458.08 91.932 459.592 91.3547 460.57 90.9763 cv
460.57 88.5764 li
cp
f
465.36 91.6878 mo
468.272 91.6878 li
468.272 84.5311 li
473.607 84.5311 li
473.607 91.6878 li
476.519 91.6878 li
476.519 76.351 li
473.607 76.351 li
473.607 82.7745 li
468.272 82.7745 li
468.272 76.351 li
465.36 76.351 li
465.36 91.6878 li
cp
f
482.177 91.6878 mo
484.556 91.6878 li
484.556 79.7521 li
484.601 79.7521 li
490.825 91.6878 li
493.715 91.6878 li
493.715 76.351 li
491.336 76.351 li
491.336 87.7315 li
491.292 87.7315 li
485.357 76.351 li
482.177 76.351 li
482.177 91.6878 li
cp
f
505.177 91.932 mo
509.667 91.932 511.579 88.7097 511.579 84.019 cv
511.579 79.3295 509.667 76.1068 505.177 76.1068 cv
500.664 76.1068 498.774 79.3295 498.774 84.019 cv
498.774 88.7097 500.664 91.932 505.177 91.932 cv
cp
501.842 84.019 mo
501.842 80.1522 502.754 77.5733 505.177 77.5733 cv
507.599 77.5733 508.511 80.1522 508.511 84.019 cv
508.511 87.8875 507.599 90.4655 505.177 90.4655 cv
502.754 90.4655 501.842 87.8875 501.842 84.019 cv
cp
f
516.616 91.6878 mo
525.264 91.6878 li
525.264 89.843 li
519.528 89.843 li
519.528 76.351 li
516.616 76.351 li
516.616 91.6878 li
cp
f
535.077 91.932 mo
539.567 91.932 541.478 88.7097 541.478 84.019 cv
541.478 79.3295 539.567 76.1068 535.077 76.1068 cv
530.564 76.1068 528.674 79.3295 528.674 84.019 cv
528.674 88.7097 530.564 91.932 535.077 91.932 cv
cp
531.742 84.019 mo
531.742 80.1522 532.654 77.5733 535.077 77.5733 cv
537.5 77.5733 538.411 80.1522 538.411 84.019 cv
538.411 87.8875 537.5 90.4655 535.077 90.4655 cv
532.654 90.4655 531.742 87.8875 531.742 84.019 cv
cp
f
557.676 82.6637 mo
552.007 82.6637 li
552.007 84.5085 li
554.763 84.5085 li
554.763 89.843 li
554.519 90.1537 553.829 90.4655 552.963 90.4655 cv
549.651 90.4655 548.961 87.3315 548.961 83.6419 cv
548.961 81.5969 548.961 77.5733 552.074 77.5733 cv
554.208 77.5733 554.318 79.4628 554.385 80.3737 cv
557.542 80.3737 li
557.542 77.44 555.407 76.1068 552.074 76.1068 cv
547.339 76.1068 545.893 79.3738 545.893 83.8861 cv
545.893 88.3766 547.894 91.932 552.718 91.932 cv
554.83 91.932 556.519 91.1987 557.676 90.5094 cv
557.676 82.6637 li
cp
f
565.667 91.6878 mo
568.579 91.6878 li
568.579 84.5085 li
573.603 76.351 li
570.802 76.351 li
567.467 81.9744 li
564.245 76.351 li
560.887 76.351 li
565.667 84.5085 li
565.667 91.6878 li
cp
f
59.0268 63.6121 mo
51.1889 64.7451 44.7088 70.0656 41.934 77.228 cv
82.39 77.228 li
79.6358 70.1214 73.2355 64.8287 65.4809 63.6389 cv
65.4752 44.6882 li
70.0141 45.3112 li
70.8543 54.433 li
72.7143 54.9592 74.5045 55.6489 76.2094 56.4871 cv
82.9472 50.2684 li
86.6595 52.7691 li
83.4077 61.344 li
85.1068 62.8651 86.6422 64.5657 87.983 66.4162 cv
96.8604 64.0832 li
98.9629 68.0315 li
92.0669 74.0719 li
92.8443 76.1855 93.4036 78.4046 93.717 80.7014 cv
102.651 82.8037 li
102.651 87.2751 li
93.717 89.3774 li
93.4036 91.6745 92.8443 93.8936 92.0669 96.0068 cv
98.9629 102.047 li
96.8604 105.996 li
87.983 103.663 li
86.6422 105.513 85.1068 107.214 83.4077 108.735 cv
86.6595 117.31 li
82.9472 119.811 li
76.2094 113.592 li
74.5045 114.43 72.7143 115.121 70.8543 115.646 cv
70.0141 124.768 li
65.4752 125.391 li
65.4837 106.439 li
73.4234 105.221 79.9432 99.7 82.5818 92.3359 cv
41.7412 92.3359 li
44.4007 99.7572 51.0006 105.305 59.0238 106.467 cv
59.0564 125.391 li
54.3091 124.768 li
53.4689 115.646 li
51.6087 115.12 49.8185 114.43 48.1146 113.592 cv
41.376 119.811 li
37.6637 117.31 li
40.9155 108.735 li
39.2163 107.214 37.681 105.513 36.3408 103.663 cv
27.4626 105.996 li
25.3601 102.047 li
32.2563 96.0068 li
31.4787 93.8925 30.9196 91.6745 30.6061 89.3774 cv
21.6729 87.2751 li
21.6729 82.8037 li
30.6061 80.7014 li
30.9196 78.4046 31.4787 76.1863 32.2563 74.0719 cv
25.3601 68.0315 li
27.4626 64.0832 li
36.3408 66.4162 li
37.681 64.5657 39.2163 62.8651 40.9155 61.344 cv
37.6637 52.7691 li
41.376 50.2684 li
48.1146 56.4871 li
49.8185 55.6489 51.6087 54.9592 53.4689 54.433 cv
54.3091 45.3112 li
59.0564 44.6882 li
59.0268 63.6121 li
cp
f
gsave
nclp
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 853 x Fq(Rober)t(t)24 b(E.)h(Guinness)-38
1820 y Fp(Conte)o(xt)j(A)m(wareness)h(Using)e(Lo)o(w-Cost)g(Sensor)o(s)
-38 2091 y Fq(Doctor)o(al)e(thesis)p eop end
%%Page: 2 2
TeXDict begin 2 1 bop -38 -140 a Fo(2)p -38 -106 3071
4 v eop end
%%Page: 1 3
TeXDict begin 1 2 bop 1229 762 a Fn(ABSTRA)-5 b(CT)-38
1204 y Fm(There)20 b(is)g(a)f(strong)j(need)e(for)g(an)g(accurate)i
(pedestrian)h(na)n(vigation)f(system,)f(functional)i(also)d(in)-38
1339 y(GNSS)k(challenging)30 b(en)l(vironments,)h(for)26
b(impro)o(v)o(ed)i(safety)g(and)f(to)f(enhance)j(e)n(v)o(eryday)f
(life.)-38 1475 y(Pedestrian)38 b(na)n(vigation)h(is)d(mainly)h(needed)
h(in)e(urban)i(areas)f(and)g(indoors,)k(en)l(vironments)-38
1610 y(that)30 b(are)g(challenging)j(for)d(GNSS)e(b)n(ut)i(also)g(for)g
(other)h(RF)d(positioning)33 b(systems)e(and)f(some)-38
1746 y(non-RF)f(systems)g(such)g(as)g(the)g(magnetometry)h(used)g(for)e
(heading)j(due)e(to)f(the)h(presence)h(of)-38 1881 y(ferrous)j
(material.)51 b(Indoor)32 b(and)f(urban)h(na)n(vigation)i(has)d(been)g
(an)g(acti)n(v)o(e)g(research)i(area)e(for)-38 2017 y(years.)53
b(There)31 b(is)g(no)g(indi)n(vidual)j(system)e(at)f(this)g(time)g
(that)h(can)f(address)i(all)e(needs)i(set)e(for)-38 2152
y(pedestrian)36 b(na)n(vigation)h(in)c(these)i(en)l(vironments,)k(b)n
(ut)34 b(a)f(fused)h(solution)i(of)d(dif)n(ferent)j(sen-)-38
2288 y(sors)27 b(can)f(pro)o(vide)h(better)g(accurac)o(y)-6
b(,)28 b(a)n(v)n(ailability)g(and)f(continuity)-6 b(.)38
b(Self-contained)29 b(sensors,)-38 2423 y(namely)34 b(digital)g
(compasses)h(for)e(measuring)i(heading,)i(gyroscopes)f(for)d(heading)i
(changes)-38 2559 y(and)28 b(accelerometers)j(for)d(the)g(user)h
(speed,)g(constitute)i(a)c(good)h(option)i(for)e(pedestrian)i(na)n(vi-)
-38 2694 y(gation.)j(Ho)n(we)n(v)o(er)l(,)24 b(their)i(performance)h
(suf)n(fers)f(from)e(noise)i(and)f(biases)h(that)f(result)h(in)e(lar)n
(ge)-38 2830 y(position)j(errors)f(increasing)h(with)d(time.)32
b(Such)25 b(errors)g(can)g(ho)n(we)n(v)o(er)g(be)g(mitigated)g(using)h
(in-)-38 2965 y(formation)c(about)f(the)f(user)g(motion)h(obtained)h
(from)d(consecuti)n(v)o(e)k(images)d(tak)o(en)h(by)f(a)g(camera)-38
3101 y(carried)k(by)e(the)g(user)l(,)h(pro)o(vided)h(that)e(its)g
(position)i(and)f(orientation)i(with)d(respect)h(to)f(the)g(users)-38
3236 y(body)27 b(are)f(kno)n(wn.)36 b(The)25 b(motion)i(of)e(the)h
(features)i(in)e(the)g(images)g(may)g(then)g(be)g(transformed)-38
3371 y(into)31 b(information)h(about)f(the)f(user')-5
b(s)31 b(motion.)48 b(Due)29 b(to)h(its)f(distincti)n(v)o(e)k
(characteristics,)i(this)-38 3507 y(vision-aiding)c(complements)e
(other)f(positioning)i(technologies)g(in)d(order)h(to)f(pro)o(vide)h
(better)-38 3642 y(pedestrian)f(na)n(vigation)f(accurac)o(y)f(and)f
(reliability)-6 b(.)-38 3835 y(This)23 b(thesis)h(discusses)h(the)e
(concepts)h(of)f(a)f(visual)i(gyroscope)i(that)d(pro)o(vide)h(the)f
(relati)n(v)o(e)h(user)-38 3971 y(heading)30 b(and)f(a)f(visual)h
(odometer)h(that)f(pro)o(vides)h(the)e(translation)j(of)d(the)h(user)g
(between)g(the)-38 4106 y(consecuti)n(v)o(e)f(images.)33
b(Both)24 b(methods)i(use)f(a)g(monocular)h(camera)g(carried)g(by)f
(the)g(user)-5 b(.)33 b(The)-38 4241 y(visual)k(gyroscope)i(monitors)e
(the)f(motion)g(of)g(virtual)h(features,)j(called)d(v)n(anishing)h
(points,)-38 4377 y(arising)25 b(from)e(parallel)i(straight)g(lines)f
(in)f(the)g(scene,)h(and)f(from)g(the)h(change)g(of)f(their)h(location)
-38 4512 y(that)31 b(resolv)o(es)h(heading,)i(roll)d(and)g(pitch.)50
b(The)29 b(method)j(is)e(applicable)j(to)d(the)h(human)g(en)l(vi-)-38
4648 y(ronments)25 b(as)f(the)g(straight)h(lines)g(in)e(the)h
(structures)i(enable)f(the)f(v)n(anishing)i(point)f(perception.)-38
4783 y(F)o(or)32 b(the)h(visual)h(odometer)l(,)i(the)d(ambiguous)i
(scale)e(arising)i(when)d(using)i(the)f(homography)p
eop end
%%Page: 2 4
TeXDict begin 2 3 bop -38 -140 a Fo(ii)1357 b Fl(Abstract)p
-38 -106 3071 4 v -38 150 a Fm(between)29 b(consecuti)n(v)o(e)i(images)
d(to)g(observ)o(e)i(the)e(translation)j(is)d(solv)o(ed)h(using)g(tw)o
(o)e(dif)n(ferent)-38 286 y(methods.)44 b(First,)29 b(the)f(scale)h(is)
f(computed)i(using)g(a)d(special)j(con\002guration)h(intended)g(for)d
(in-)-38 421 y(doors)d(and)f(secondly)-6 b(,)25 b(the)f(scale)g(is)f
(resolv)o(ed)i(using)g(dif)n(ferenced)h(GNSS)21 b(carrier)k(phase)f
(mea-)-38 557 y(surements)30 b(of)d(the)h(camera)g(in)g(a)f(method)h
(aimed)g(for)g(urban)h(en)l(vironments.)44 b(Both)28
b(methods)-38 692 y(are)i(suf)n(\002ciently)j(tolerant)f(for)e(the)g
(challenges)j(of)d(visual)i(perception)h(in)d(indoor)i(and)e(urban)-38
828 y(en)l(vironments,)42 b(namely)36 b(lo)n(w)f(lighting)i(and)f
(dynamic)h(objects)g(hindering)h(the)e(vie)n(w)-6 b(.)64
b(The)-38 963 y(heading)33 b(and)e(translation)j(are)d(further)i(inte)o
(grated)g(with)d(other)i(positioning)i(systems)e(and)g(a)-38
1099 y(na)n(vigation)e(solution)e(is)f(obtained.)40 b(The)26
b(performance)k(of)c(the)h(proposed)i(vision-aided)h(na)n(v-)-38
1234 y(igation)e(w)o(as)d(tested)i(in)f(v)n(arious)i(en)l(vironments,)i
(indoors)e(and)e(urban)h(can)o(yon)h(en)l(vironments)-38
1370 y(to)i(demonstrate)j(its)d(ef)n(fecti)n(v)o(eness.)51
b(These)30 b(e)o(xperiments,)k(although)e(of)e(limited)h(durations,)-38
1505 y(sho)n(w)f(that)g(visual)h(processing)i(ef)n(\002ciently)f
(complements)f(other)g(positioning)j(technologies)-38
1641 y(in)24 b(order)g(to)g(pro)o(vide)h(better)f(pedestrian)j(na)n
(vigation)f(accurac)o(y)f(and)f(reliability)-6 b(.)p
eop end
%%Page: 3 5
TeXDict begin 3 4 bop 965 758 a Fn(T)-9 b(ABLE)27 b(OF)d(CONTENTS)-38
1196 y Fk(Abstract)70 b Fj(:)46 b(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g
(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)
f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)170 b Fm(i)-38 1385 y
Fk(T)-7 b(able)24 b(of)f(Contents)88 b Fj(:)46 b(:)f(:)h(:)g(:)g(:)f(:)
h(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h
(:)g(:)f(:)h(:)g(:)f(:)h(:)119 b Fm(iii)-38 1574 y Fk(List)23
b(of)h(Figures)55 b Fj(:)45 b(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f
(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)
h(:)g(:)f(:)h(:)99 b Fm(vii)-38 1763 y Fk(List)23 b(of)h(T)-7
b(ables)92 b Fj(:)45 b(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g
(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)
f(:)h(:)124 b Fm(ix)-38 1951 y Fk(Abbre)n(viations)80
b Fj(:)45 b(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)g
(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)124
b Fm(xi)-38 2140 y Fk(Symbols)59 b Fj(:)46 b(:)g(:)g(:)f(:)h(:)g(:)f(:)
h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h
(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)104 b Fm(xv)-38
2329 y Fk(1.)69 b(Introduction)77 b Fj(:)46 b(:)g(:)f(:)h(:)g(:)g(:)f
(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)
h(:)g(:)f(:)h(:)g(:)f(:)h(:)150 b Fm(1)99 2518 y(1.1)96
b(Research)25 b(Objecti)n(v)o(es)k(.)45 b(.)g(.)g(.)h(.)f(.)g(.)g(.)g
(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)
185 b(3)99 2707 y(1.2)96 b(Related)24 b(W)-7 b(ork)64
b(.)45 b(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)
g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185 b(3)99
2895 y(1.3)96 b(Author')-5 b(s)25 b(Contrib)n(ution)36
b(.)45 b(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)
g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185 b(4)99 3084 y(1.4)96
b(Thesis)24 b(Outline)32 b(.)45 b(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)
g(.)185 b(5)-38 3273 y Fk(2.)69 b(Ov)o(ervie)n(w)23 b(of)h(conte)o(xt)h
(a)o(w)o(areness)g Fj(:)45 b(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)
h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)150 b Fm(7)99
3462 y(2.1)96 b(History)24 b(of)g(Conte)o(xt)g(A)-8 b(w)o(areness)86
b(.)45 b(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)
g(.)g(.)g(.)185 b(9)99 3651 y(2.2)96 b(The)23 b(Role)g(of)h(Sensors)g
(in)g(Conte)o(xt)g(A)-8 b(w)o(areness)33 b(.)45 b(.)g(.)h(.)f(.)g(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185 b(9)99 3839 y(2.3)96
b(Current)24 b(State-of-the-Art)i(in)e(Conte)o(xt)g(A)-8
b(w)o(areness)28 b(.)46 b(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185
b(9)99 4028 y(2.4)96 b(Potential)25 b(Applications)h(of)d(Conte)o(xt)i
(A)-8 b(w)o(areness)25 b(.)45 b(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g
(.)g(.)185 b(9)99 4217 y(2.5)96 b(T)-6 b(echnologies)26
b(Rele)n(v)n(ant)e(to)g(Conte)o(xt)g(A)-8 b(w)o(areness)84
b(.)46 b(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185
b(9)308 4406 y(2.5.1)110 b(Other)23 b(T)-6 b(echnologies)41
b(.)k(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h
(.)f(.)g(.)g(.)g(.)185 b(9)308 4595 y(2.5.2)110 b(Relati)n(v)o(e)24
b(Positioning)85 b(.)45 b(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g
(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185 b(9)308 4783 y(2.5.3)110
b(Inertial)25 b(Sensors)47 b(.)e(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)
g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185
b(9)p eop end
%%Page: 4 6
TeXDict begin 4 5 bop -38 -140 a Fo(iv)1191 b Fl(T)-7
b(able)20 b(of)g(Contents)p -38 -106 3071 4 v 308 150
a Fm(2.5.4)110 b(Estimation)85 b(.)45 b(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g
(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185
b(9)308 338 y(2.5.5)110 b(Kalman)23 b(Filter)39 b(.)45
b(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g
(.)g(.)h(.)f(.)g(.)g(.)g(.)185 b(9)308 525 y(2.5.6)110
b(Extended)25 b(Kalman)e(Filter)82 b(.)45 b(.)g(.)h(.)f(.)g(.)g(.)g(.)h
(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)185 b(9)99
713 y(2.6)96 b(Ethical)24 b(Issues)h(Related)f(to)g(Conte)o(xt)g(A)-8
b(w)o(areness)38 b(.)45 b(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g
(.)185 b(9)-38 900 y Fk(3.)69 b(Machine)24 b(Learning)68
b Fj(:)46 b(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g
(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)104
b Fm(11)99 1087 y(3.1)96 b(Fundamentals)25 b(of)f(Machine)h(Learning)83
b(.)46 b(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)
139 b(11)99 1275 y(3.2)96 b(Supervised)25 b(Machine)g(Learning)84
b(.)45 b(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)
g(.)g(.)g(.)139 b(11)99 1462 y(3.3)96 b(Unsupervised)26
b(Machine)f(Learning)56 b(.)45 b(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)
g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139 b(11)308 1650 y(3.3.1)110
b(SIFT)-8 b(-Features)29 b(.)45 b(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f
(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(11)99 1837 y(3.4)96 b(Image)24 b(Matching)35 b(.)46
b(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f
(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139 b(11)99 2024
y(3.5)96 b(Camera)23 b(Calibration)57 b(.)45 b(.)g(.)g(.)h(.)f(.)g(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)
g(.)139 b(11)308 2212 y(3.5.1)110 b(Distortion)43 b(.)i(.)g(.)g(.)g(.)h
(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)
f(.)g(.)g(.)g(.)139 b(11)-38 2399 y Fk(4.)69 b(Smartphone)25
b(Platform)f(and)g(Sensors)62 b Fj(:)46 b(:)f(:)h(:)g(:)g(:)f(:)h(:)g
(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)104
b Fm(13)99 2587 y(4.1)96 b(Why)23 b(Smartphones?)57 b(.)45
b(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139 b(13)99 2774 y(4.2)96
b(Brief)23 b(History)i(of)e(Smartphone)i(De)n(v)o(elopments)70
b(.)45 b(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(13)99 2961 y(4.3)96 b(Current)24 b(State-of-the-art)j(Smartphone)e
(Platforms)30 b(.)46 b(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(13)99 3149 y(4.4)96 b(Smartphone)25 b(Sensors)g(.)45
b(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139 b(13)308 3336 y(4.4.1)110
b(GNSS)21 b(Sensors)77 b(.)45 b(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g
(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(13)308 3524 y(4.4.2)110 b(Inertial)25 b(Sensors)47
b(.)e(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g
(.)g(.)h(.)f(.)g(.)g(.)g(.)139 b(13)308 3711 y(4.4.3)110
b(Communication-related)28 b(Sensors)60 b(.)45 b(.)g(.)g(.)h(.)f(.)g(.)
g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139 b(13)308 3898 y(4.4.4)110
b(Other)23 b(\224soft)i(sensors\224)84 b(.)45 b(.)g(.)g(.)g(.)h(.)f(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(13)-38 4086 y Fk(5.)69 b(Other)23 b(Lo)n(w-Cost)g(Sensors)i(and)f
(Platforms)87 b Fj(:)46 b(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g
(:)f(:)h(:)g(:)f(:)h(:)104 b Fm(15)99 4273 y(5.1)96 b(The)23
b(Principle)i(of)e(the)h(V)-5 b(isual)24 b(Odometer)86
b(.)45 b(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(15)308 4461 y(5.1.1)110 b(Measuring)25 b(the)f(Distance)h(of)e(an)h
(Object)g(from)f(the)h(Camera)72 b(.)45 b(.)g(.)139 b(15)308
4648 y(5.1.2)110 b(Error)18 b(Detection)h(and)g(Ambiguity)g(Resolving)h
(for)e(the)h(V)-5 b(isual)18 b(Odome-)599 4783 y(ter)41
b(.)k(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(15)p eop end
%%Page: 5 7
TeXDict begin 5 6 bop 1162 -140 a Fl(T)-7 b(able)20 b(of)g(Contents)
1241 b Fo(v)p -38 -106 3071 4 v 308 150 a Fm(5.1.3)110
b(De)o(generac)o(y)48 b(.)d(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g
(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(15)308 342 y(5.1.4)110 b(Performance)25 b(of)e(the)h(V)-5
b(isual)24 b(Odometer)j(.)45 b(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g
(.)g(.)139 b(15)-38 534 y Fk(6.)69 b(Smartphone)25 b(User)e(Conte)o
(xts)41 b Fj(:)46 b(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h
(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)104 b Fm(17)99
726 y(6.1)96 b(V)-5 b(isual)23 b(Gyroscope)j(and)e(Odometer)g(Aided)g
(Multi-Sensor)i(Positioning)34 b(.)45 b(.)139 b(17)308
918 y(6.1.1)110 b(Kalman)23 b(Filter)h(Used)f(in)h(Multi-Sensor)h
(Positioning)94 b(.)46 b(.)f(.)g(.)g(.)g(.)139 b(17)-38
1110 y Fk(7.)69 b(Maritime)24 b(User)f(Conte)o(xts)72
b Fj(:)45 b(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g
(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)104 b Fm(19)99
1302 y(7.1)96 b(Ambiguity)25 b(Resolution)h(Using)f(Dif)n(ferenced)h
(GNSS)21 b(Carrier)k(Phase)f(Mea-)308 1438 y(surements)61
b(.)45 b(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)
g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139
b(19)308 1629 y(7.1.1)110 b(Ambiguous)25 b(T)m(ranslation)g(Using)f
(the)g(Fundamental)h(Matrix)48 b(.)d(.)g(.)139 b(19)-38
1821 y Fk(8.)69 b(Conclusions)76 b Fj(:)46 b(:)g(:)f(:)h(:)g(:)g(:)f(:)
h(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h
(:)g(:)f(:)h(:)g(:)f(:)h(:)104 b Fm(21)99 2013 y(8.1)96
b(Main)23 b(Results)83 b(.)45 b(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g
(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)
139 b(21)99 2205 y(8.2)96 b(Future)24 b(De)n(v)o(elopment)92
b(.)45 b(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)h(.)f(.)g(.)
g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)139 b(21)-38 2397 y Fk(Bibliography)42
b Fj(:)k(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)
g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)g(:)f(:)h(:)g(:)f(:)h(:)g(:)f(:)h(:)104
b Fm(23)p eop end
%%Page: 6 8
TeXDict begin 6 7 bop -38 -140 a Fo(vi)1191 b Fl(T)-7
b(able)20 b(of)g(Contents)p -38 -106 3071 4 v eop end
%%Page: 7 9
TeXDict begin 7 8 bop 1069 761 a Fn(LIST)26 b(OF)e(FIGURES)p
eop end
%%Page: 8 10
TeXDict begin 8 9 bop -38 -140 a Fo(viii)1223 b Fl(List)21
b(of)f(Figures)p -38 -106 3071 4 v eop end
%%Page: 9 11
TeXDict begin 9 10 bop 1098 761 a Fn(LIST)26 b(OF)e(T)-9
b(ABLES)p eop end
%%Page: 10 12
TeXDict begin 10 11 bop -38 -140 a Fo(x)1266 b Fl(List)21
b(of)f(T)-7 b(ables)p -38 -106 3071 4 v eop end
%%Page: 11 13
TeXDict begin 11 12 bop 1084 761 a Fn(ABBREVIA)-9 b(TIONS)12
1162 y Fm(A)d(VUPT)600 b(Absolute)25 b(V)-5 b(isual)24
b(attitude)h(Update)12 1366 y(BLUE)654 b(Best)23 b(Linear)h(Unbiased)h
(Estimate)12 1570 y(C/A)741 b(Coarse/Acquisition)12 1774
y(CCD)705 b(Char)n(ge)25 b(Coupled)f(De)n(vice)12 1977
y(CMOS)634 b(Complementary)25 b(Metal)f(Oxide)g(Semiconductor)12
2181 y(COMP)-8 b(ASS/Beidou)188 b(Chinese)25 b(Satellite)f(Na)n
(vigation)i(System)12 2385 y(DCM)685 b(Direction)25 b(Cosine)f(Matrix)
12 2589 y(DOP)710 b(Dilution)25 b(Of)d(Precision)12 2793
y(E)837 b(East)12 2996 y(ECEF)669 b(Earth)24 b(Centered)g(Earth)g(Fix)o
(ed)12 3200 y(EKF)720 b(Extended)25 b(Kalman)f(Filter)12
3404 y(ENU)705 b(East-North-Up)12 3608 y(EXIF)690 b(Exchangeable)27
b(Image)c(File)12 3811 y(Galileo)627 b(European)25 b(Satellite)g(Na)n
(vigation)g(System)12 4015 y(GDOP)644 b(Geometric)24
b(Dilution)h(Of)e(Precision)12 4219 y(GLON)m(ASS)474
b(The)23 b(Russian)i(Positioning)h(System,)d(Global'naya)905
4361 y(Na)n(vigatsionnaya)k(Sputknikk)o(o)o(v)n(aya)g(Sistema)12
4565 y(GNSS)659 b(Global)24 b(Na)n(vigation)i(Satellite)e(System)p
eop end
%%Page: 12 14
TeXDict begin 12 13 bop -38 -140 a Fo(xii)1242 b Fl(Abbre)n(viations)p
-38 -106 3071 4 v 12 144 a Fm(GPS)670 b(Global)24 b(Positioning)i
(System)12 348 y(HD)706 b(High-de\002nition)12 552 y(HSGPS)553
b(High)23 b(Sensiti)n(vity)j(GPS)12 756 y(IEEE)640 b(The)23
b(Institute)i(of)f(Electrical)h(and)f(Electronics)i(Engineers)12
959 y(ION)676 b(Institute)25 b(of)f(Na)n(vigation)12
1163 y(IMU)661 b(Inertial)25 b(Measurement)g(Unit)12
1367 y(INS)691 b(Inertial)25 b(Na)n(vigation)g(System)12
1571 y(KF)721 b(Kalman)23 b(\002lter)12 1774 y(LCI)691
b(Lo)n(w-coherence)25 b(Interferometry)12 1978 y(LDOP)599
b(Line)23 b(Dilution)i(Of)d(Precision)12 2182 y(LOS)665
b(Line)23 b(Of)g(Sight)12 2386 y(Max)672 b(Maximum)12
2590 y(MEMS)569 b(Micro-Electro-Mechanical)12 2793 y(Min)687
b(Minimum)12 2997 y(MSP)655 b(Multi)23 b(Sensor)i(Positioning)12
3201 y(N)772 b(North)12 3405 y(PGCP)609 b(Pseudo)24 b(Ground)g(Control)
h(Points)12 3608 y(PDOP)604 b(Position)24 b(Dilution)h(Of)e(Precision)
12 3812 y(PPP)685 b(Precise)24 b(Point)g(Positioning)12
4016 y(RANSA)l(C)471 b(RANdom)22 b(SAmple)h(Consensus)p
eop end
%%Page: 13 15
TeXDict begin 13 14 bop 2936 -140 a Fo(xiii)p -38 -106
3071 4 v 35 144 a Fm(RF)630 b(Radio)24 b(Frequenc)o(y)12
348 y(RFID)557 b(Radio)24 b(Frequenc)o(y)h(Identi\002cation)12
552 y(rms)629 b(root)25 b(mean)e(square)12 756 y(RSSI)572
b(Recei)n(v)o(ed)25 b(Signal)f(Strength)h(Indication)12
959 y(SHT)592 b(Standard)25 b(Hough)f(T)m(ranform)12
1163 y(SIFT)577 b(Scale)24 b(In)l(v)n(ariant)i(Feature)e(T)m(ransform)
12 1367 y(SLAM)511 b(Simultaneous)26 b(Localization)g(And)e(Mapping)12
1571 y(SP)-8 b(AN)539 b(Synchronized)27 b(Position)e(Attitude)g(Na)n
(vigation)12 1774 y(SVD)582 b(Singular)25 b(V)-10 b(alue)24
b(Decomposition)12 1978 y(std)660 b(standard)26 b(de)n(viation)12
2182 y(T)-7 b(oA)605 b(T)m(ime)23 b(of)g(Arri)n(v)n(al)12
2386 y(TVUPT)470 b(T)-6 b(emporal)24 b(V)-5 b(isual)24
b(Attitude)h(Update)12 2590 y(U)699 b(Up)12 2793 y(U)l(A)-12
b(V)583 b(Unmanned)25 b(Aerial)f(V)-10 b(ehicle)12 2997
y(UKF)582 b(Unscented)26 b(Kalman)d(\002lter)12 3201
y(UTC)582 b(Coordinated)27 b(Uni)n(v)o(ersal)d(T)m(ime)12
3405 y(UERE)526 b(User)24 b(Equi)n(v)n(alent)h(Range)f(Error)12
3608 y(UWB)552 b(Ultra-W)l(ideband)12 3812 y(V)-12 b(A)645
b(V)-5 b(ision-aided)12 4016 y(W)l(iFi)582 b(W)l(ireless)26
b(netw)o(ork,)e(a)f(re)o(gistered)j(trademark)f(of)f(the)f(W)l(i-Fi)h
(Alliance)12 4220 y(WLAN)491 b(W)l(ireless)26 b(Local)d(Area)h(Netw)o
(ork)p eop end
%%Page: 14 16
TeXDict begin 14 15 bop -38 -140 a Fo(xiv)1229 b Fl(Abbre)n(viations)p
-38 -106 3071 4 v eop end
%%Page: 15 17
TeXDict begin 15 16 bop 1254 761 a Fn(SYMBOLS)12 1162
y Fj(\013)70 1176 y Fi(i)862 1162 y Fm(Angle)24 b(between)h(a)e(line)h
Fj(i)f Fm(in)h(an)f(image)h(and)g(the)g(image)g(x-axis)12
1366 y Fj(\014)799 b Fm(roll)12 1570 y Fh(\001)p Fj(t)741
b Fm(T)m(ime)23 b(interv)n(al)12 1774 y Fh(\001)p Fg(x)719
b Fm(V)-10 b(ector)24 b(of)n(fset)h(of)e(the)h(user')-5
b(s)25 b(true)f(position)i(and)e(time)f(bias)862 1916
y(from)h(the)g(v)n(alues)g(at)g(the)g(linearization)j(point)12
2120 y Fj(\016)s Fg(x)110 2135 y Fi(k)862 2120 y Fm(Perturbation)g(of)c
(the)h(state)12 2324 y Fj(\017)49 2291 y Ff(\000)862
2324 y Fm(Error)g(of)f Fe(a)h(priori)g Fm(state)h(estimate)g(or)e
(perturbation)k(of)d(the)862 2466 y(Euler)g(angles)12
2670 y Fj(\017)813 b Fm(Error)24 b(of)f Fe(a)h(posteriori)i
Fm(state)e(estimate)h(or)e(noise)862 2812 y(in)h(GPS)d(measurements)862
2955 y(or)j(v)o(ector)g(of)g(errors)h(in)e(GNSS)e(measurements)12
3158 y Fj(\021)57 3172 y Fi(g)862 3158 y Fm(Noise)j(in)g(gyroscope)i
(or)d(carrier)i(phase)g(measurement)12 3362 y Fj(\025)797
b Fm(Carrier)25 b(w)o(a)n(v)o(elength)g(or)f(longitude)12
3566 y Fj(\026)795 b Fm(Mean)12 3770 y Fd(r)774 b Fm(Image)24
b(gradient)12 3973 y Fj(!)793 b Fm(Earth)24 b(turn)g(rate)12
4177 y Fj(!)72 4144 y Fi(b)69 4205 y(ib)862 4177 y Fm(Body)g(\(b\))g
(turn)g(rate)g(with)f(respect)j(to)d(the)h(inertial)h(\(i\))f(frame)862
4320 y(angular)i(v)o(elocity)f(measurement)19 4523 y
Fh(~)-52 b Fj(!)72 4490 y Fi(b)69 4551 y(ib)862 4523
y Fm(Gyroscope)26 b(angular)f(v)o(elocity)h(measurement)p
eop end
%%Page: 16 18
TeXDict begin 16 17 bop -38 -140 a Fo(xvi)1318 b Fl(Symbols)p
-38 -106 3071 4 v 12 144 a Fg(\012)904 b Fm(Sk)o(e)n(w)23
b(symmetrical)i(matrix)f(of)g(the)f(angular)j(v)o(elocity)f(v)o(ector)
12 348 y Fj(\036)926 b Fm(pitch)25 b(or)e(latitude)12
552 y Fg(\010)904 b Fm(State)24 b(transition)i(matrix)12
756 y Fj(\032)933 b Fm(Pseudorange)27 b(or)c(the)h(radius)h(of)e(a)g
(line)h(in)g(an)f(image)h(in)992 898 y(Hough)g(T)m(ransform)20
1102 y Fh(^)-53 b Fj(\032)933 b Fm(Estimated)25 b(pseudorange)i
(computed)e(from)f(the)f(estimated)992 1244 y(user)h(position)12
1448 y Fj(\033)928 b Fm(Standard)25 b(de)n(viation)12
1652 y Fj(\033)67 1619 y Fc(2)992 1652 y Fm(V)-10 b(ariance)12
1856 y Fj(\033)67 1823 y Fc(2)64 1882 y Fi(C)123 1856
y Fh(\()p Fj(t)191 1870 y Fi(A)248 1856 y Fh(\))709 b
Fm(Allan)24 b(v)n(ariance)12 2059 y Fj(\022)937 b Fm(Heading,)25
b(\(azimuth\))12 2263 y Fj(')921 b Fm(Carrier)24 b(phase)12
2467 y Fj(b)941 b Fm(body)25 b(frame)12 2671 y Fj(c)941
b Fm(Speed)24 b(of)g(light)12 2874 y Fg(C)904 b Fm(Direction)25
b(cosine)g(matrix)f(or)g(Con)l(v)n(olution)12 3078 y
Fg(d)922 b Fm(direction)26 b(of)e(a)f(line)h(in)f(an)h(image)12
3282 y Fj(d)59 3296 y Fi(iono)992 3282 y Fm(Ionospheric)j(delay)12
3486 y Fj(d)59 3500 y Fi(tr)r(opo)992 3486 y Fm(T)m(ropospheric)g
(delay)12 3689 y Fj(d\032)886 b Fm(Ephemeris)25 b(error)12
3893 y Fj(dt)900 b Fm(Satellite)25 b(clock)g(error)12
4097 y Fj(D)87 4111 y Fi(i)992 4097 y Fm(Distance)g(between)g(the)f
(starting)h(point)g(of)e(line)h Fj(i)992 4239 y Fm(and)g(the)g(v)n
(anishing)i(point)12 4443 y Fg(E)911 b Fm(Essential)25
b(matrix)12 4647 y Fj(f)935 b Fm(F)o(ocal)24 b(le)o(gth)12
4851 y Fg(f)948 b Fm(Speci\002c)24 b(force)p eop end
%%Page: 17 19
TeXDict begin 17 18 bop 2913 -140 a Fo(xvii)p -38 -106
3071 4 v 12 144 a Fg(F)763 b Fm(Fundamental)25 b(matrix)12
287 y Fg(g)777 b Fm(Mass)23 b(gra)n(vitation)12 491 y
Fg(G)747 b Fm(User)n(-satellite)26 b(geometry)f(matrix)f(or)g(Con)l(v)n
(olution)j(k)o(ernel)841 633 y(or)c(g-sensiti)n(vity)k(coef)n
(\002cient)e(matrix)12 837 y Fj(h)777 b Fm(Height)12
1040 y Fj(H)753 b Fm(Height)24 b(of)f(an)h(image)g(in)f(pix)o(els)12
1244 y Fg(H)747 b Fm(Design)24 b(matrix)g(or)f(image)h(homography)12
1448 y Fj(i)798 b Fm(inertial)25 b(frame)12 1652 y Fg(I)789
b Fm(Image)23 b(matrix)12 1856 y Fj(k)782 b Fm(Distortion)25
b(v)n(alue)12 2059 y Fg(K)747 b Fm(Kalman)23 b(gain)h(or)f(camera)i
(calibration)h(matrix)12 2263 y(L1)728 b(GPS)21 b(signal)k(carrier)g
(frequenc)o(y)h(at)d(1575.42)i(MHz)12 2467 y Fg(M)730
b Fm(Image)23 b(gradient)j(magnitude)g(matrix)12 2671
y Fj(N)756 b Fm(Gaussian)25 b(probability)h(distrib)n(ution)h(or)d
(inte)o(ger)h(number)841 2813 y(of)e(carrier)i(w)o(a)n(v)o(es)12
3017 y Fj(N)95 2984 y Fi(e)841 3017 y Fm(Inertia)g(tensor)12
3220 y Fg(O)750 b Fm(Image)23 b(gradient)j(orientation)h(matrix)12
3424 y Fj(p)783 b Fm(pressure)12 3628 y Fg(P)758 b Fm(State)23
b(error)h(co)o(v)n(ariance)i(or)e(camera)g(matrix)19
3832 y Fh(~)-52 b Fj(q)788 b Fm(Spectral)24 b(density)i(v)n(alue)12
4036 y Fg(Q)750 b Fm(Process)24 b(noise)h(co)o(v)n(ariance)12
4239 y Fj(r)788 b Fm(Geometric)24 b(range)12 4443 y Fj(r)53
4458 y Fi(d)841 4443 y Fm(Radial)g(distance)h(of)f(the)g(normalized)h
(distorted)h(image)e(point)12 4647 y Fg(r)786 b Fm(User)23
b(position)j(v)o(ector)e(or)g(Least-squares)i(residual)g(v)o(ector)p
eop end
%%Page: 18 20
TeXDict begin 18 19 bop -38 -140 a Fo(xviii)1301 b Fl(Symbols)p
-38 -106 3071 4 v 35 144 a Fg(R)931 b Fm(Measurement)25
b(noise)g(co)o(v)n(ariance)h(or)d(camera)h(rotation)1044
287 y(matrix)12 491 y Fj(R)81 505 y Fi(g)1044 491 y Fm(Uni)n(v)o(ersal)
g(gas)g(constant)12 694 y Fg(R)90 708 y Fi(W)10 b(LAN)1044
694 y Fm(RSSI)21 b(observ)n(ation)27 b(v)o(ector)12 898
y Fj(s)989 b Fm(Ambiguous)25 b(scale)f(in)f(translation)k(observ)o(ed)f
(from)1044 1040 y(consecuti)n(v)o(e)g(images)12 1244
y Fg(s)991 b Fm(Satellite)24 b(coordinate)j(v)o(ector)12
1448 y Fj(S)976 b Fm(User)23 b(speed)12 1652 y Fg(S)974
b Fm(Scale)23 b(f)o(actor)i(and)f(non-orthogonality)29
b(matrix)12 1856 y Fj(t)999 b Fm(time)12 2059 y Fj(t)45
2073 y Fi(u)1044 2059 y Fm(Recei)n(v)o(er)24 b(clock)g(error)12
2263 y Fg(t)991 b Fm(User)23 b(translation)j(v)o(ector)12
2467 y Fg(T)85 2434 y Fi(i)1044 2467 y Fm(Satellite)e(i')-5
b(s)24 b(position)i(v)o(ector)12 2671 y Fg(T)85 2685
y Fi(r)r(cv)r(r)1044 2671 y Fm(Recei)n(v)o(er)e(position)h(v)o(ector)12
2874 y Fj(T)65 2888 y Fc(0)1044 2874 y Fm(T)-6 b(emperature)24
b(at)g(the)g(sea)f(le)n(v)o(el)12 3078 y Fj(T)65 3092
y Fi(L)1044 3078 y Fm(T)-6 b(emperature)24 b(lapse)h(rate)12
3282 y Fj(u)980 b Fm(Principal)25 b(point')-5 b(s)25
b(x-coordinate)12 3486 y Fg(u)974 b Fm(User)23 b(coordinate)j(v)o
(ector)1044 3628 y(or)d(the)h(unit)g(v)o(ector)h(from)e(user)h(to)g
(satellite)12 3832 y Fj(u)64 3846 y Fi(GC)1044 3832 y
Fm(Satellite)g(and)g(user)g(geometry)i(change)12 4036
y Fj(v)988 b Fm(Principal)25 b(point')-5 b(s)25 b(y-coordinate)12
4239 y Fg(v)977 b Fm(Kalman)23 b(\002lter')-5 b(s)24
b(inno)o(v)n(ation)i(v)o(ector)1044 4382 y(or)d(user)h(v)o(elocity)h(v)
o(ector)g(or)e(a)h(v)n(anishing)i(point)e(matrix)12 4585
y Fj(v)56 4600 y Fi(k)1044 4585 y Fm(Process)g(noise)p
eop end
%%Page: 19 21
TeXDict begin 19 20 bop 2932 -140 a Fo(xix)p -38 -106
3071 4 v 12 144 a Fj(v)s(f)10 b(ov)770 b Fm(V)-10 b(ertical)24
b(\002eld-of-vie)n(w)h(of)f(a)f(camera)12 348 y Fg(v)67
362 y Fi(x)972 348 y Fm(V)-10 b(anishing)25 b(point)g(in)e(x-axis)i
(direction)972 491 y(in)e(homogenous)k(coordinates)12
694 y Fg(v)67 708 y Fi(y)972 694 y Fm(V)-10 b(anishing)25
b(point)g(in)e(y-axis)i(direction)972 837 y(in)e(homogenous)k
(coordinates)12 1040 y Fg(v)67 1054 y Fi(z)972 1040 y
Fm(V)-10 b(anishing)25 b(point)g(in)e(z-axis)i(direction)972
1183 y(in)e(homogenous)k(coordinates)12 1387 y Fj(w)77
1401 y Fi(i)972 1387 y Fm(Standardized)f(inno)o(v)n(ation)g(of)e(the)f
Fj(i)p Fm(th)h(element)972 1529 y(of)f(the)h(inno)o(v)n(ation)i(v)o
(ector)12 1733 y Fj(w)77 1748 y Fi(k)972 1733 y Fm(Measurement)f(noise)
12 1937 y Fg(x)67 1952 y Fi(k)972 1937 y Fm(State)e(v)o(ector)13
2140 y Fg(^)-53 b(x)67 2102 y Ff(\000)67 2170 y Fi(k)972
2140 y Fe(a)23 b(priori)i Fm(state)f(estimate)13 2344
y Fg(^)-53 b(x)67 2359 y Fi(k)972 2344 y Fe(a)23 b(posteriori)j
Fm(state)f(estimate)p 12 2497 56 4 v 12 2548 a Fg(x)67
2563 y Fi(k)972 2548 y Fm(Nominal)f(v)n(alue)g(of)f(the)h(state)12
2752 y Fj(x)64 2766 y Fi(u)972 2752 y Fm(User)f(\(recei)n(v)o(er\))i
(x-coordinate)12 2955 y Fg(x)905 b Fm(Feature)24 b(coordinates)j(in)c
(the)h(image)g(reference)i(frame)12 3159 y Fg(X)881 b
Fm(Object)24 b(coordinates)j(in)c(the)h(w)o(orld)g(reference)i(frame)
972 3302 y(or)d(user)h(position)i(East)d(component)37
3483 y Fg(_)12 3505 y(X)881 b Fm(T)m(ime)22 b(deri)n(v)n(ati)n(v)o(e)j
(of)f Fg(X)12 3709 y Fj(y)57 3723 y Fi(u)972 3709 y Fm(User)f(\(recei)n
(v)o(er\))i(y-coordinate)18 3913 y Fh(~)-51 b Fj(y)s
Fh(\()p Fj(t)128 3927 y Fi(A)185 3913 y Fh(\))220 3928
y Fi(k)972 3913 y Fm(A)-7 b(v)o(erage)24 b(v)n(alue)h(of)e(bin)h(k)f
(in)h(Allan)f(v)n(ariance)12 4117 y Fg(Y)881 b Fm(User)23
b(position)j(North)e(component)38 4298 y Fg(_)12 4320
y(Y)881 b Fm(T)m(ime)22 b(deri)n(v)n(ati)n(v)o(e)j(of)f
Fg(Y)12 4524 y(z)58 4539 y Fi(k)972 4524 y Fm(Measurement)h(v)o(ector)p
eop end
%%Page: 20 22
TeXDict begin 20 21 bop -38 -140 a Fo(xx)1327 b Fl(Symbols)p
-38 -106 3071 4 v 12 144 a Fj(z)54 158 y Fi(u)808 144
y Fm(User)23 b(\(recei)n(v)o(er\))j(z-coordinate)12 348
y Fj(Z)734 b Fm(Depth)24 b(of)f(an)h(object)h(i.e.)j(the)c
(Z-coordinate)i(in)e(the)f(w)o(orld)808 491 y(reference)j(frame)p
eop end
%%Page: 1 23
TeXDict begin 1 22 bop 1037 762 a Fn(1.)53 b(INTR)m(ODUCTION)-38
1204 y Fm(W)-7 b(e)26 b(are)g(currently)j(witnessing)g(an)d(era)h(of)f
(technological)k(con)l(v)o(er)n(gence)h(that)c(ri)n(v)n(als)g(some)f
(of)-38 1339 y(the)20 b(great)h(technological)j(uphea)n(v)n(als)f(of)d
(modern)h(history)-6 b(.)29 b(The)20 b(internal)h(comb)n(ustion)i
(engine,)-38 1475 y(the)28 b(electric)g(lamp,)g(the)f(transistor)l(,)k
(the)c(jetliner)l(,)j(the)d(arti\002cial)h(satellite\227it)i(is)d(in)g
(this)g(same)-38 1610 y(re)n(v)o(ered)22 b(compan)o(y)g(that)g(we)e
(can)h(place)h(the)f(technological)k(re)n(v)n(olution)f(we)c(are)h(no)n
(w)g(under)n(go-)-38 1746 y(ing.)35 b(It)25 b(is)h(dif)n(\002cult,)g
(ho)n(we)n(v)o(er)l(,)h(to)e(pin)h(this)g(current)h(re)n(v)n(olution)h
(do)n(wn)e(to)f(an)o(y)h(one)g(particular)-38 1881 y(technology)g
(because)e(it)e(is)g(in)g(f)o(act)h(the)g(result)g(of)g(at)f(least)h
(four)g(major)g(technologies)j(con)l(v)o(er)n(g-)-38
2017 y(ing)31 b(o)o(v)o(er)f(a)f(period)j(of)e(a)g(fe)n(w)f(decades:)44
b(\(1\))31 b(mobile)f(telecommunication)35 b(de)n(vices,)e(\(2\))d(the)
-38 2152 y(Internet,)25 b(\(3\))e(positioning)j(technologies,)g(and)d
(\(4\))g(a)f(wide)h(range)h(of)f(ine)o(xpensi)n(v)o(e)i(yet)e(highly)
-38 2288 y(capable)e(sensors,)g(namely)f(microelectromechanical)k
(systems)c(\(MEMS\).)d(All)h(of)h(these)g(tech-)-38 2423
y(nologies)32 b(came)e(to)f(a)g(technological)34 b(crossroads)f(in)c
(the)h(late)g(20th)g(century)i(and)e(early)h(21st)-38
2559 y(century)-6 b(.)31 b(The)23 b(\002rst)g(major)h(manifestation)j
(of)c(this)h(con)l(v)o(er)n(gence,)j(especially)g(with)c(respect)i(to)
-38 2694 y(consumer)k(mark)o(ets,)f(is)f(the)g(so-called)j
(\223smartphone\224,)g(of)d(which)g(there)h(are)f(more)g(than)h(one)-38
2830 y(billion)d(in)f(use)f(w)o(orldwide)i(today)-6 b(.)30
b(This)23 b(number)h(is)g(lik)o(ely)g(to)g(surpass)h(tw)o(o)e(billion)i
(by)f(2015.)-38 2965 y(These)d(de)n(vices)h(allo)n(w)e(their)h(users)h
(to)e(stay)h(\223connected\224)j(virtually)e(e)n(v)o(erywhere)g(the)o
(y)f(go,)g(and)-38 3101 y(consequently)27 b(an)o(yone)e(can)e(connect)i
(to)e(these)i(one)e(billion)i(plus)f(users)g(from)f(an)o(y)g(netw)o
(ork)o(ed)-38 3236 y(de)n(vice,)39 b(including)f(desktop)g(computers)f
(and)f(\223land-line\224)i(phones\226no)h(matter)c(where)h(the)-38
3371 y(user)c(is)g(located)h(or)f(tra)n(v)o(elling)i(to.)52
b(Ironically)-6 b(,)36 b(in)c(man)o(y)f(technologically)37
b(adv)n(anced)c(soci-)-38 3507 y(eties,)e(it)e(is)g(no)n(w)g
(considered)j(a)d(societal)i(and/or)g(beha)n(vioral)h(challenge)g(for)d
(one)h(to)f(go)g(\223of)n(f)-38 3642 y(the)24 b(grid\224)h(or)e
(\223disconnected\224)28 b(for)c(an)o(y)f(e)o(xtended)j(period)f(of)e
(time.)-38 3835 y(It)38 b(is)h(the)g(author')-5 b(s)40
b(vie)n(w)e(that)h(the)g(smartphone)i(is)d(only)i(the)f(\002rst)f
(manifestation)j(of)e(this)-38 3971 y(technological)33
b(re)n(v)n(olution.)47 b(Man)o(y)29 b(other)h(so-called)h
(\223smart\224)f(de)n(vices)g(are)f(soon)h(to)f(follo)n(w:)-38
4106 y(\223smartw)o(atches\224)j(and)d(the)f(use)h(of)g(v)n(arious)h
(wearable)f(sensors)i(may)d(soon)h(become)h(a)e(main-)-38
4241 y(stay)c(consumer)h(habit.)k(In)23 b(addition,)i(the)f(same)f
(technologies)k(that)d(ha)n(v)o(e)f(made)h(smartphones)-38
4377 y(possible)34 b(and)e(popular)i(are)e(quickly)h(making)g(their)f
(w)o(ay)g(into)g(e)o(xisting)i(e)n(v)o(eryday)f(de)n(vices,)-38
4512 y(including)d(cars,)f(home)f(appliances,)j(and)e(e)n(v)o(en)e
(toothbrushes.)45 b(It)28 b(w)o(ould)g(be)f(na)m(\250)-27
b(\021v)o(e)29 b(to)e(spec-)-38 4648 y(ulate)h(e)o(xactly)g(ho)n(w)d
(this)j(re)n(v)n(olution)h(will)d(play)h(out)g(in)g(the)f(coming)i
(decades,)h(b)n(ut)e(is)f(clear)h(is)-38 4783 y(that)i(it)f(is)f
(already)j(changing)h(the)d(lifestyles,)j(habits,)g(and)d
(possibilities)k(of)c(people)h(li)n(ving)g(in)p eop end
%%Page: 2 24
TeXDict begin 2 23 bop -38 -140 a Fo(2)1243 b Fl(1.)45
b(Introduction)p -38 -106 3071 4 v -38 150 a Fm(the)28
b(early)h(21st)g(century)-6 b(,)31 b(especially)f(those)f(who)f(can)g
(af)n(ford)h(these)g(\(currently\))i(\223high-end\224)-38
286 y(consumer)25 b(de)n(vices.)-38 566 y(Aside)j(from)f(being)h(a)f
(con)l(v)o(er)n(gence)k(of)c(ne)n(w)f(technologies,)32
b(is)27 b(there)h(an)o(y)f(unifying)i(concept)-38 701
y(or)i(principle)j(that)e(is)f(underlying)j(this)e(re)n(v)n(olution?)55
b(Some)30 b(w)o(ould)i(ar)n(gue)h(that)f(it)f(is)g(the)g(in-)-38
837 y(creased)d(le)n(v)o(els)e(of)g Fe(mobility)h Fm(that)f(these)h
(technologies)i(pro)o(vide.)37 b(Others)26 b(ha)n(v)o(e)h(rallied)g
(under)-38 972 y(the)22 b(banner)i(of)d Fe(ubiquitous)k(computing)f
Fm(or)e Fe(pervasive)i(computing)p Fm(,)g(which)e(describes)j(the)d(f)o
(act)-38 1108 y(that)32 b(computing)i(de)n(vices)f(can)f(no)n(w)f(be)h
(found)h(nearly)g(e)n(v)o(erywhere)g(one)f(looks.)54
b(Certainly)-38 1243 y(these)22 b(are)g(tw)o(o)f(important)i
(characteristics)i(gi)n(ving)e(wind)e(to)g(this)h(re)n(v)n(olution,)i
(b)n(ut)e(we)f(ar)n(gue)h(in)-38 1379 y(this)28 b(thesis)h(to)n(w)o
(ards)f(another)h(underlying)i(principle)f(that)e(pro)o(vides)h(a)e
(common)h(thread)h(and)-38 1514 y(deep)c(insight)g(into)f(ho)n(w)f(our)
h(relationship)j(to)c(these)i(computing)h(de)n(vices)f(is)e(changing.)
-38 1794 y(One)i(common)g(de)n(v)o(elopment,)i(of)d(course,)j(is)d(the)
h(increasing)j(ability)e(of)f(computing)i(de)n(vices)-38
1929 y(to)k(ful\002ll)g(v)n(arious)h(user)g(desires,)h(e.g.)51
b(do)n(wnload)32 b(lar)n(ge)g(amounts)g(of)e(data)i(at)e(high)i
(speeds,)-38 2065 y(capture)e(or)e(render)h(v)n(arious)g(high-quality)j
(multimedia)d(content,)h(store)f(and)f(edit)h(content)g(in)-38
2200 y(v)n(arious)23 b(w)o(ays,)f(etc.)28 b(What)22 b(is)f(not)h(adv)n
(ancing)i(or)d(e)o(xpanding\227at)k(least,)d(not)g(at)f(an)o(y)h
(consider)n(-)-38 2336 y(able)j(rate\227is)h(the)e(patience)j(or)d
(attention)j(span)e(of)f(the)h(users)g(themselv)o(es.)33
b(Therefore,)26 b(users)-38 2471 y(are)21 b(e)o(xpecting)h
(\(consciously)i(or)c(not\))h(that)g(the)f(de)n(vices)i(will)e(\223do)g
(more\224)h(with)f(essentially)j(the)-38 2607 y(same)j(total)h
(quantity)h(and)f(quality)h(of)e(human)h(input.)37 b(F)o(ortunately)-6
b(,)29 b(ho)n(we)n(v)o(er)l(,)e(these)g(de)n(vices)-38
2742 y(are)22 b(rapidly)h(adv)n(ancing)h(in)e(their)g(ability)h(to)e
(kno)n(w)h(what)f(their)h(users)h(w)o(ant)e(or)h(need\227without)-38
2878 y(the)36 b(user)f(ha)n(ving)i(to)e(e)o(xplicitly)j(formulate)f
(and)e(e)o(xpress)i(these)f(desires)h(to)e(the)g(computer)-5
b(.)-38 3013 y(This)31 b(is)g(the)h(goal)g(under)h(which)e(this)h
(thesis)h(is)e(moti)n(v)n(ated)h(and)g(focused\227to)i(impro)o(v)o(e)e
(our)-38 3149 y(understanding)c(of)23 b(ho)n(w)g(computing)j(de)n
(vices)f(can)f(better)h(understand)h(us.)-38 3429 y(W)-7
b(e)30 b(are)i(not)f(there)h(yet.)52 b(In)31 b(man)o(y)g(w)o(ays,)i
(smartphones)g(are)f(not)f(yet)h(\223smart\224.)52 b(The)o(y)31
b(ha)n(v)o(e)-38 3564 y(the)f(\223braun\224)i(and)f(not)f(the)g
(brains,)j(in)d(the)g(sense)h(that)f(the)o(y)g(are)h(po)n(werful)g(and)
f(capable)i(b)n(ut)-38 3700 y(de\002cient)26 b(in)f(understanding)k
(the)c(user')-5 b(s)25 b(needs.)34 b(This)24 b(thesis)i(aims)f(to)f
(impro)o(v)o(e)h(the)g(state-of-)-38 3835 y(the-art)33
b(in)e(a)g(computer')-5 b(s)34 b(ability)f(to)e(understand)k(human)d
(situations)i(or)d(conte)o(xts.)54 b(Mobile)-38 3971
y(computing)27 b(researchers)h(ha)n(v)o(e)d(adopted)i(the)e(term)f
Fe(conte)n(xt)j(awar)m(eness)f Fm(to)f(refer)h(to)e(this)h(abil-)-38
4106 y(ity)-6 b(.)48 b(In)29 b(particular)l(,)34 b(this)c(thesis)h
(will)f(focus)h(on)e(ho)n(w)g(lo)n(w-cost)i(sensors)h(can)e(be)f
(utilized)j(for)-38 4241 y(b)n(uilding)37 b(conte)o(xt)f(a)o(w)o
(areness.)64 b(The)34 b(reason)i(for)f(focusing)i(on)d(lo)n(w-cost)i
(is)e(moti)n(v)n(ated)i(by)-38 4377 y(a)29 b(desire)h(that)f(the)g(de)n
(v)o(eloped)i(systems)f(and)f(methodologies)j(will)d(ha)n(v)o(e)g(the)g
(widest)h(impact)-38 4512 y(possible)k(for)d(a)g(lar)n(ge)h(number)g
(of)g(people.)53 b(As)30 b(technology)35 b(adv)n(ances)e(and)f(costs)g
(of)f(these)-38 4648 y(de)n(vices)f(are)f(dri)n(v)o(en)h(lo)n(wer)e
(and)h(lo)n(wer)l(,)h(the)f(range)g(of)g(applications)j(and)d(impacts)h
(the)o(y)f(will)-38 4783 y(ha)n(v)o(e)24 b(will)g(become)g(wider)g(and)
g(wider)-5 b(.)p eop end
%%Page: 3 25
TeXDict begin 3 24 bop 1030 -140 a Fl(1.1.)45 b(Research)20
b(Objecti)n(v)o(es)1108 b Fo(3)p -38 -106 3071 4 v 979
150 a Fb(1.1)100 b(Research)26 b(Objecti)n(v)o(es)-38
441 y Fm(The)35 b(o)o(v)o(erall)i(goal)f(of)g(this)g(thesis)h(were)e
(described)j(in)e(general)h(terms)f(abo)o(v)o(e,)j(b)n(ut)d(in)g(this)
-38 576 y(section)c(we)c(brie\003y)j(de\002ne)f(the)f(detailed)j
(research)g(objecti)n(v)o(es)g(of)d(the)h(thesis.)48
b(The)o(y)30 b(are)f(as)-38 712 y(follo)n(ws:)99 1014
y Fd(\017)45 b Fm(to)25 b(elucidate)i(a)e(fresh)g(interpretation)k(and)
c(model)g(for)g(the)g(concept)i(of)e(conte)o(xt)h(a)o(w)o(are-)189
1149 y(ness.)99 1367 y Fd(\017)45 b Fm(to)28 b(introduce)h(and)f
(formalize)h(a)e(methodology)j(for)d(achie)n(ving)j(conte)o(xt)f(a)o(w)
o(areness)f(in)189 1503 y(computing)e(de)n(vices.)99
1721 y Fd(\017)45 b Fm(to)37 b(present)i(the)e(state-of-the-art)k(in)c
(rele)n(v)n(ant)h(smartphone)h(technology)-6 b(,)44 b(especially)189
1856 y(with)24 b(re)o(gards)g(to)g(sensors)h(that)f(can)g(be)g(used)g
(for)g(conte)o(xt)h(a)o(w)o(areness.)99 2074 y Fd(\017)45
b Fm(to)24 b(e)n(v)n(aluate)i(and)e(describe)i(additional)h(sensors)e
(that)g(can)f(be)g(used)h(for)f(conte)o(xt)h(a)o(w)o(are-)189
2209 y(ness)g(in)e(v)n(arious)i(scenarios)h(and)e(applications.)99
2427 y Fd(\017)45 b Fm(to)20 b(present)h(implementation)i(details)e
(and)f(test)f(results)i(of)f(a)f(set)h(of)f(e)o(xperiments)j(related)
189 2563 y(to)i(conte)o(xt-a)o(w)o(are)i(smartphone)g(applications.)99
2781 y Fd(\017)45 b Fm(to)25 b(present)h(implementation)h(details)f
(and)f(test)g(results)h(of)e(second)i(set)f(of)f(e)o(xperiments)189
2916 y(related)i(to)d(conte)o(xt-a)o(w)o(are)j(maritime)e(na)n
(vigation)i(applications.)99 3134 y Fd(\017)45 b Fm(to)27
b(present)g(conclusions)j(based)d(on)f(the)h(results)h(of)e(this)g
(research)i(and)f(suggest)h(future)189 3270 y(a)n(v)o(enues)e(for)e
(further)h(research.)1111 3621 y Fb(1.2)100 b(Related)25
b(W)-8 b(ork)-38 3911 y Fm(The)30 b(set)g(of)g(rele)n(v)n(ant)i
(related)f(w)o(ork)g(concerning)i(this)d(thesis)i(is)e(quite)h(lar)n
(ge)g(and)g(v)n(aried,)h(as)-38 4047 y(includes)37 b(\002elds)e(as)f
(di)n(v)o(erse)i(as)e(machine)i(learning,)j(location)e(technologies,)j
(sensor)c(tech-)-38 4182 y(nologies,)d(and)c(v)n(arious)i
(application-speci\002c)j(topics.)46 b(As)29 b(such,)i(the)e(related)h
(w)o(ork)g(will)e(be)-38 4318 y(co)o(v)o(ered)d(in)f(greatest)i(detail)
g(in)e(the)g(topic-speci\002c)j(chapters)f(that)f(are)f(to)g(follo)n(w)
-6 b(.)31 b(In)24 b(this)h(sec-)-38 4453 y(tion,)36 b(ho)n(we)n(v)o(er)
l(,)g(we)c(brie\003y)i(re)n(vie)n(w)f(the)g(research)i(literature)g
(that)f(is)f(most)g(similar)h(to)f(this)-38 4589 y(thesis)25
b(topic.)-15 4783 y(5-10)f(paragraphs...)p eop end
%%Page: 4 26
TeXDict begin 4 25 bop -38 -140 a Fo(4)1243 b Fl(1.)45
b(Introduction)p -38 -106 3071 4 v 945 150 a Fb(1.3)99
b(Author')-5 b(s)24 b(Contrib)n(ution)-38 457 y Fm(\(Laura')-5
b(s)25 b(te)o(xt)f(left)g(as)g(e)o(xample.)30 b(W)l(ill)24
b(compose)h(this)g(to)n(w)o(ards)f(the)g(end)h(of)e(the)h(process...\))
31 b(In)-38 592 y(this)21 b(thesis)h(a)e(no)o(v)o(el)h(pedestrian)i(na)
n(vigation)g(system)e(is)f(presented.)30 b(T)-7 b(w)o(o)19
b(concepts)k(are)e(de)n(v)o(el-)-38 728 y(oped,)k(namely)h(a)d
(\224visual)j(gyroscope\224)i(pro)o(viding)f(the)d(user)h(heading)i
(and)d(a)g(\224visual)i(odome-)-38 863 y(ter\224)20 b(pro)o(viding)h
(the)f(translation.)30 b(Author')-5 b(s)20 b(contrib)n(utions)k
(include)d(also)f(a)e(system)i(de)n(v)o(eloped)-38 999
y(for)27 b(pedestrian)j(urban)d(na)n(vigation,)j(utilizing)f(the)e
(visual)h(gyroscope,)i(visual)f(odometer)f(and)-38 1134
y(signal)d(carrier)g(information)h(obtained)g(from)d(at)h(least)g(tw)o
(o)f(GNSS)e(satellites.)-38 1338 y(All)f(calculations)j(are)e(of)f(a)f
(suf)n(\002ciently)j(lo)n(w)e(comple)o(xity)i(to)e(be)g(adopted)i(for)f
(na)n(vigation)h(with)-38 1474 y(current)j(smartphones.)32
b(The)23 b(main)g(contrib)n(utions)28 b(of)c(the)f(thesis)i(are)f(as)f
(follo)n(ws:)99 1812 y Fd(\017)45 b Fm(A)20 b(visual)h(gyroscope)i
(with)d(lo)n(wer)g(computational)k(requirements)f(suitable)f(for)f
(present)189 1948 y(smartphones.)46 b(The)27 b(visual)j(gyroscope)h(is)
c(based)j(on)e(observing)j(heading,)g(pitch)e(and)189
2083 y(roll)24 b(of)g(the)g(camera,)g(using)g(v)n(anishing)i(points.)99
2329 y Fd(\017)45 b Fm(A)17 b(no)o(v)o(el)i(error)g(detection)i(method)
e(which)g(pro)o(vides)h(accurate)g(and)f(reliable)h(na)n(vigation)189
2464 y(despite)34 b(the)d(unforeseeable)36 b(motions)c(of)g(a)f
(pedestrian.)55 b(The)31 b(algorithm)i(mak)o(es)f(the)189
2600 y(visual)25 b(gyroscope)i(suitable)e(for)f(pedestrian)i(na)n
(vigation.)99 2845 y Fd(\017)45 b Fm(A)25 b(visual)h(odometer)l(,)i
(namely)e(a)f(method)h(to)g(resolv)o(e)g(translation)j(from)c(images)h
(using)189 2980 y(a)e(monocular)i(camera.)k(The)24 b(visual)h(odometer)
g(is)f(suitable)i(to)e(be)g(used)g(also)h(in)f(indoor)189
3116 y(en)l(vironments)37 b(which)d(are)f(usually)i(poor)f(in)f
(features.)60 b(It)32 b(is)h(feasible)j(for)d(seamless)189
3251 y(na)n(vigation)27 b(since)e(it)e(leans)i(on)f(the)g(visual)h
(gyroscope')-5 b(s)28 b(orientation)f(information)f(and)189
3387 y(needs)f(only)g(the)e(approximate)k(height)e(of)e(the)h(camera)g
(as)f(prior)i(information.)99 3632 y Fd(\017)45 b Fm(A)28
b(vision-aided)33 b(dif)n(ferentiated)f(carrier)f(phase)f(na)n
(vigation)i(system)d(for)g(pedestrians.)189 3767 y(The)e(method)h(is)f
(leaner)i(than)f(pre)n(vious)h(similar)f(solutions.)42
b(The)27 b(system)h(is)f(indepen-)189 3903 y(dent)f(from)e(other)i
(sensors)g(than)f(the)g(camera)g(and)g(the)g(GNSS)d(recei)n(v)o(er)j
(because)i(it)d(en-)189 4038 y(compasses)i(the)e(visual)h(gyroscope)h
(and)e(visual)h(odometer)g(pro)o(viding)g(the)f(orientation)189
4174 y(and)g(motion)h(information.)-38 4512 y(The)20
b(core)g(contrib)n(utions)25 b(of)20 b(Chapters)h(4-6)f(were)g(\002rst)
g(presented)i(in)e([)p Fa(?)p Fm(],)g([)p Fa(?)p Fm(],)g([)p
Fa(?)p Fm(],)g([)p Fa(?)p Fm(],)g([)p Fa(?)p Fm(],)g([)p
Fa(?)p Fm(])-38 4648 y(and)32 b([)p Fa(?)p Fm(])f(in)g(which)h(the)f
(author)i(of)e(the)g(thesis)i(is)e(the)g(\002rst)g(author)h(and)g(in)f
([)p Fa(?)p Fm(])g(in)g(which)h(the)-38 4783 y(author)25
b(of)f(the)f(thesis)i(is)f(a)f(co-author)-5 b(.)p eop
end
%%Page: 5 27
TeXDict begin 5 26 bop 1125 -140 a Fl(1.4.)45 b(Thesis)21
b(Outline)1203 b Fo(5)p -38 -106 3071 4 v 1094 150 a
Fb(1.4)99 b(Thesis)24 b(Outline)-38 436 y Fm(\(Laura')-5
b(s)30 b(te)o(xt)f(left)f(as)h(e)o(xample.)44 b(W)l(ill)29
b(compose)h(this)f(when)g(chapters)h(are)f(more)g(or)f(less)h(\002-)-38
572 y(nalized...\))50 b(In)30 b Fa(Chapter)f(2)p Fm(,)i(the)f(most)g
(pre)n(v)n(alent)i(systems)f(used)g(in)f(pedestrian)j(na)n(vigation)-38
707 y(-)d(i.e.)48 b(GNSS,)27 b(WLAN)h(and)j(self-contained)j(sensors)e
(-)e(are)g(presented.)52 b(The)29 b(computer)j(vi-)-38
843 y(sion)e(principles)i(rele)n(v)n(ant)e(in)f(vision-aided)k(na)n
(vigation)f(are)d(discussed)i(in)e Fa(Chapter)g(3)f Fm(with)-38
978 y(an)23 b(emphasis)h(on)f(the)g(methods)h(and)f(algorithms)i(used)f
(in)e(the)h(thesis.)30 b Fa(Chapter)22 b(4)g Fm(introduces)-38
1114 y(the)34 b(concept)i(of)d(a)h(\224visual)h(gyroscope\224)i(and)d
(the)g(no)o(v)o(el)g(error)h(detection)h(algorithm.)61
b(The)-38 1249 y(feasibility)29 b(and)e(challenges)i(of)e(the)f(visual)
i(gyroscope)h(are)d(discussed)j(as)e(well)f(as)g(the)g(ef)n(fect)-38
1385 y(of)e(dif)n(ferent)j(camera)e(and)g(setup)g(characteristics)k(on)
24 b(the)h(accurac)o(y)h(and)f(applicability)j(of)c(the)-38
1520 y(method)34 b(in)e(pedestrian)k(na)n(vigation.)58
b(In)33 b Fa(Chapter)e(5)i Fm(a)f(concept)i(of)f(\224visual)h
(odometer\224)g(is)-38 1656 y(presented.)61 b(The)33
b(mathematics,)38 b(strengths)e(and)d(challenges)k(of)c(the)h(visual)h
(odometer)g(and)-38 1791 y(its)e(utilization)j(are)d(discussed.)60
b Fa(Chapter)32 b(6)g Fm(presents)j(results)g(from)e(v)n(arious)h(e)o
(xperiments)-38 1927 y(inte)o(grating)28 b(the)d(visual)h(gyroscope)i
(and)e(odometer)l(,)h(both)e(for)g(indoor)i(and)e(urban)h(pedestrian)
-38 2062 y(na)n(vigation.)31 b(In)20 b Fa(Chapter)f(7)h
Fm(the)h(vision-aided)j(dif)n(ferentiated)g(carrier)d(phase)h(na)n
(vigation)h(sys-)-38 2198 y(tem)i(for)h(pedestrians,)j(results)e(from)e
(e)o(xperiments)j(and)e(its)g(feasibility)i(for)e(urban)g(pedestrian)
-38 2333 y(na)n(vigation)h(are)d(discussed.)32 b Fa(Chapter)24
b(8)f Fm(pro)o(vides)j(conclusions)h(and)e(recommendations)i(for)-38
2469 y(future)e(research.)p eop end
%%Page: 6 28
TeXDict begin 6 27 bop -38 -140 a Fo(6)1243 b Fl(1.)45
b(Introduction)p -38 -106 3071 4 v eop end
%%Page: 7 29
TeXDict begin 7 28 bop 501 759 a Fn(2.)53 b(O)-5 b(VER)g(VIEW)24
b(OF)g(CONTEXT)h(A)-13 b(W)h(ARENESS)-38 1198 y Fm(As)24
b(stated)i(in)f(the)g(introduction,)j Fe(conte)n(xt)f(awar)m(eness)f
Fm(is)f(the)g(term)f(adopted)j(by)e(mobile)g(com-)-38
1334 y(puting)31 b(researchers)i(to)c(describe)j(a)d(computer')-5
b(s)32 b(ability)f(to)e(understand)k(\(i.e.)46 b(be)30
b(a)o(w)o(are)f(of\))-38 1469 y(the)c(situation)h(or)e(conte)o(xt)i(in)
e(which)g(it)g(is)g(operating.)33 b(Of)23 b(particular)k(emphasis)e(is)
f(the)h Fe(human)-38 1605 y Fm(conte)o(xt)f(\(i.e.)k(the)23
b(computer)h Fe(user')l(s)g Fm(situation\),)h(b)n(ut)e(de)n
(vice-speci\002c)j(conte)o(xt)e(can)f(also)g(be)f(of)-38
1740 y(importance)j(to)d(the)h(e)o(xtent)g(that)g(it)g(can)f(af)n(fect)
i(the)e(user)i(\(e.g.)k(lo)n(w)22 b(battery)i(of)e(the)h(de)n(vice)h
(may)-38 1876 y(af)n(fect)h(ho)n(w)e(the)h(user)g(uses)h(the)f(de)n
(vice)h(and)f(e)n(v)o(en)g(cause)h(him)e(or)h(her)g(to)g(alter)g(plans)
h(based)g(on)-38 2011 y(this)f(situation\).)-38 2201
y(Man)o(y)29 b(de\002nitions)h(of)f(conte)o(xt)h(and)f(conte)o(xt)g(a)o
(w)o(areness)h(ha)n(v)o(e)g(been)f(proposed,)j(usually)e(re-)-38
2336 y(\003ecting)25 b(dif)n(ferent)h(discipline-speci\002c)i
(perspecti)n(v)o(es.)33 b(F)o(or)23 b(e)o(xample,)h(the)h(w)o(ord)e
(conte)o(xt)j(\002g-)-38 2472 y(ures)35 b(prominently)j(in)c(di)n(v)o
(erse)i(\002elds)e(including)j(linguistics,)j(psychology)-6
b(,)41 b(neuroscience,)-38 2607 y(la)o(w)-6 b(,)20 b(and)g(computer)i
(science.)29 b(Some)20 b(researchers)j(ha)n(v)o(e)d(studied)i(the)f
(etymology)h(of)e(the)g(w)o(ord)-38 2743 y(conte)o(xt)27
b(and)e(ha)n(v)o(e)g(e)n(v)o(en)g(attempted)i(to)e(formalize)h(and)f
(to)g(b)n(uild)h(consensus)i(concerning)g(the)-38 2878
y(de\002nition)d([1-4].)-38 3068 y(In)d(an)o(y)g(case,)h(we)e(require)j
(some)e(w)o(orking,)i(notional)g(de\002nition)g(of)e(conte)o(xt)h(for)g
(the)f(purposes)-38 3204 y(of)k(this)h(thesis.)37 b(In)25
b(the)i(Merriam)f(W)-7 b(ebster)27 b(Dictionary)g([5],)g(we)e(\002nd)h
(tw)o(o)f(de\002nitions)j(of)e(the)-38 3339 y(w)o(ord)e(conte)o(xt:)76
3619 y(1.)45 b(the)23 b(parts)h(of)e(a)h(discourse)i(that)e(surround)i
(a)d(w)o(ord)h(or)f(passage)j(and)e(can)g(thro)n(w)g(light)g(on)189
3755 y(its)h(meaning)76 3962 y(2.)45 b(the)29 b(interrelated)j
(conditions)g(in)c(which)h(something)i(e)o(xists)e(or)g(occurs)h(:)38
b(ENVIR)l(ON-)189 4097 y(MENT)-7 b(,)22 b(SETTING)-38
4377 y(In)27 b(this)h(thesis,)h(we)d(adopt)i(the)f(second)i
(de\002nition)g(because)g(we)d(are)h(not)h(directly)h(concerned)-38
4512 y(with)h(human)h(discourse)i(b)n(ut)e(rather)h(with)e(conditions)j
(of)d(an)h(en)l(vironment)i(or)e(setting)h(\(e.g.)-38
4648 y(geospatial)c(information\))h(that)c(can)h(be)g(sensed)h(by)e
(sensors.)36 b(Clearly)-6 b(,)27 b(these)f(tw)o(o)f(de\002nitions)-38
4783 y(are)35 b(interrelated)i(in)d(the)h(sense)g(that)g(discourse)h
(can)f(be)f(\(and)h(most)f(usually)i(is\))f(used)g(as)f(a)p
eop end
%%Page: 8 30
TeXDict begin 8 29 bop -38 -140 a Fo(8)929 b Fl(2.)46
b(Ov)o(ervie)n(w)19 b(of)h(conte)o(xt)f(a)o(w)o(areness)p
-38 -106 3071 4 v -38 150 a Fm(representation)37 b(of)c(an)g(en)l
(vironment)i(or)e(setting.)58 b(In)33 b(other)g(w)o(ords,)j(natural)e
(language)h(is)e(a)-38 286 y(common)25 b(form)e(in)h(which)h(conte)o
(xtual)h(information)h(is)d(encoded.)32 b(Our)23 b(focus,)i(ho)n(we)n
(v)o(er)l(,)g(will)-38 421 y(be)g(on)g(techniques)i(to)e(sense)h(and)f
(represent)i(conte)o(xt)f(automatically)h(using)f(sensors.)34
b(Hence,)-38 557 y(when)24 b(we)f(refer)h(to)f(conte)o(xt,)i(we)e
(refer)h(directly)h(to)f(the)g(conditions)i(in)e(the)g(en)l(vironment.)
-38 902 y(/sectionA)h(Frame)n(w)o(ork)f(for)g(Conte)o(xtual)h
(Information)-38 1247 y(Because)30 b(conte)o(xt)g(is)f(such)g(an)g
(abstract)h(concept,)i(it)c(is)h(useful)h(to)e(choose)j(some)d
(techniques)-38 1383 y(for)i(describing)i(a)d(particular)j(conte)o(xt,)
g(which)e(help)g(to)f(b)n(uild)i(a)e(frame)n(w)o(ork)h(for)g(e)o
(xpressing)-38 1518 y(conte)o(xtual)40 b(information.)71
b(If)37 b(our)h(goal)f(is)g(to)g(e)o(xplicate)i(a)e(particular)i(conte)
o(xt)g(in)e(natural)-38 1654 y(language,)22 b(then)d(we)f(might)h
(emplo)o(y)g(the)g(classic)h(technique)h(of)e(journalism)h(\(since)g
(journalism)-38 1789 y(is)37 b(an)g(age-old)i(craft)e(for)g(describing)
j(conditions)g(and)d(e)n(v)o(ents\),)k(kno)n(wn)d(as)e(the)i(Fi)n(v)o
(e)e(Ws:)-38 1925 y(Who,)29 b(What,)g(Where,)g(When,)h(and)e(Why)g
([6].)42 b(In)28 b(f)o(act,)h(this)g(technique)i(dates)e(back)g(at)e
(least)-38 2060 y(to)h(the)h(late)f(2nd)h(century)h(BC)c(when)i
(Hermagoras)i(of)e(T)-6 b(emnos)27 b(de\002ned)i(se)n(v)o(en)g
(elements)g(of)-38 2196 y(circumstance,)37 b(which)c(includes)h(\(in)f
(addition)h(to)e(the)h(Fi)n(v)o(e)e(Ws\))h(in)g(what)g(manner)h(and)g
(by)-38 2331 y(what)24 b(means)g([7].)-38 2677 y(Using)37
b(these)h(questions)h(as)e(a)f(starting)j(point)f(\(with)e(a)h
(slightly)h(dif)n(ferent)h(order\),)i(we)36 b(list)-38
2812 y(possible)26 b(elements)f(of)e(a)g(particular)j(conte)o(xt)f
(with)f(a)f(demonstrati)n(v)o(e)j(e)o(xample:)-38 3158
y(What:)36 b(A)26 b(small,)i(impromptu)g(gathering)h(of)e(colleagues)i
(Who:)36 b(Mary)-6 b(,)28 b(a)e(smartphone)k(user)l(,)-38
3293 y(as)f(well)g(as)g(three)h(of)e(Marys)i(co-w)o(ork)o(ers)h(who)e
(are)g(nearby)i(Where:)40 b(60.1609N,)30 b(24.5460E)-38
3429 y(\(WGS84\);)37 b(inside)c(the)g(main)f(lobby)h(of)f(the)h
(Finnish)g(Geodetic)g(Institute,)k(speci\002cally)d(in-)-38
3564 y(side)d(Marys)g(pock)o(et)h(When:)43 b(Friday)-6
b(,)32 b(20)e(April)h(2012)g(at)f(12:03PM)h(Why:)42 b(This)30
b(gathering)-38 3700 y(occurred)d(because)g(Mary)d(and)i(her)f
(colleagues)i(are)e(going)h(out)f(to)g(lunch)g(together)-5
b(.)35 b(The)o(y)24 b(are)-38 3835 y(w)o(aiting)d(for)f(a)g(\002fth)g
(colleague,)j(Ste)n(v)o(e,)d(to)g(arri)n(v)o(e.)28 b(In)20
b(What)g(Manner:)28 b(The)20 b(smartphone)i(is)e(e)o(x-)-38
3971 y(periencing)25 b(small,)e(sporadic)h(mo)o(v)o(ements,)f
(consistent)i(with)d(the)h(phone)g(being)h(in)e(the)h(pock)o(et)-38
4106 y(of)i(someone)i(who)e(is)g(standing)i(and)f(ha)n(ving)h(a)e
(casual)h(con)l(v)o(ersation.)38 b(By)24 b(What)i(Means:)33
b(All)-38 4241 y(of)e(the)h(abo)o(v)o(e)f(information)j(has)d(been)h
(sensed)h(or)e(reasoned)i(by)e(the)h(sensors)g(and)g(softw)o(are)-38
4377 y(e)o(xisting)37 b(in)e(a)f(smartphone,)40 b(or)34
b(acquired)k(via)d(a)f(netw)o(ork)o(ed)j(resource.)65
b(In)35 b(this)g(case,)j(the)-38 4512 y(smartphone)24
b(is)d(a)h(Samsung)g(Galaxy)g(Ne)o(xus)g(with)f(Android)i(4.1)e(OS,)f
(which)i(includes)h(a)e(GPS)-38 4648 y(recei)n(v)o(er)l(,)38
b(W)l(i\002-based)d(positioning)i(engine,)h(Bluetooth)e(module,)h
(microphone)f(and)e(audio)-38 4783 y(analyzer)l(,)26
b(ambient)f(light)f(sensor)l(,)h(accelerometers,)i(gyroscopes,)f(and)e
(magnetometers.)p eop end
%%Page: 9 31
TeXDict begin 9 30 bop 869 -140 a Fl(2.1.)45 b(History)20
b(of)g(Conte)o(xt)g(A)-8 b(w)o(areness)948 b Fo(9)p -38
-106 3071 4 v 787 150 a Fb(2.1)99 b(History)24 b(of)h(Conte)o(xt)f(A)-9
b(w)o(areness)534 440 y(2.2)99 b(The)25 b(Role)g(of)g(Sensors)f(in)h
(Conte)o(xt)f(A)-9 b(w)o(areness)456 730 y(2.3)99 b(Current)26
b(State-of-the-Art)f(in)f(Conte)o(xt)g(A)-9 b(w)o(areness)492
1020 y(2.4)99 b(Potential)24 b(Applications)f(of)i(Conte)o(xt)f(A)-9
b(w)o(areness)487 1310 y(2.5)99 b(T)-7 b(echnologies)24
b(Rele)n(v)n(ant)g(to)g(Conte)o(xt)g(A)-9 b(w)o(areness)1005
1597 y Fk(2.5.1)91 b(Other)24 b(T)-6 b(echnologies)993
1850 y(2.5.2)92 b(Relati)n(v)o(e)24 b(Positioning)1077
2103 y(2.5.3)92 b(Inertial)25 b(Sensors)1164 2356 y(2.5.4)92
b(Estimation)1108 2610 y(2.5.5)f(Kalman)24 b(Filter)924
2863 y(2.5.6)92 b(Extended)25 b(Kalman)f(Filter)499 3120
y Fb(2.6)99 b(Ethical)24 b(Issues)h(Related)g(to)f(Conte)o(xt)g(A)-9
b(w)o(areness)p eop end
%%Page: 10 32
TeXDict begin 10 31 bop -38 -140 a Fo(10)906 b Fl(2.)46
b(Ov)o(ervie)n(w)19 b(of)h(conte)o(xt)f(a)o(w)o(areness)p
-38 -106 3071 4 v eop end
%%Page: 11 33
TeXDict begin 11 32 bop 909 761 a Fn(3.)53 b(MA)-5 b(CHINE)24
b(LEARNING)-38 1202 y Fm(Intro)673 1542 y Fb(3.1)99 b(Fundamentals)24
b(of)h(Machine)g(Learning)785 1832 y(3.2)99 b(Supervised)25
b(Machine)f(Learning)733 2122 y(3.3)99 b(Unsupervised)24
b(Machine)g(Learning)1103 2408 y Fk(3.3.1)92 b(SIFT)-8
b(-Features)787 2661 y(Separating)25 b(the)f(Lines)g(from)f(Other)h
(Edges)1058 2918 y Fb(3.4)99 b(Image)25 b(Matching)994
3208 y(3.5)99 b(Camera)26 b(Calibration)1177 3494 y Fk(3.5.1)92
b(Distortion)p eop end
%%Page: 12 34
TeXDict begin 12 33 bop -38 -140 a Fo(12)1120 b Fl(3.)45
b(Machine)20 b(Learning)p -38 -106 3071 4 v eop end
%%Page: 13 35
TeXDict begin 13 34 bop 426 761 a Fn(4.)53 b(SMAR)l(TPHONE)25
b(PLA)-9 b(TFORM)24 b(AND)h(SENSORS)-38 1202 y Fm(Intro...)994
1542 y Fb(4.1)99 b(Why)25 b(Smartphones?)516 1832 y(4.2)99
b(Brief)26 b(History)e(of)g(Smartphone)h(De)n(v)o(elopments)457
2122 y(4.3)99 b(Current)26 b(State-of-the-art)f(Smartphone)g(Platforms)
977 2412 y(4.4)100 b(Smartphone)24 b(Sensors)1092 2698
y Fk(4.4.1)92 b(GNSS)21 b(Sensors)1077 2951 y(4.4.2)92
b(Inertial)25 b(Sensors)777 3204 y(4.4.3)91 b(Communication-related)29
b(Sensors)1191 3458 y(Pressure)c(Sensors)1116 3711 y(T)-6
b(emperature)25 b(Sensors)1231 3964 y(Audio)f(Sensors)1215
4218 y(Magnetometers)993 4471 y(4.4.4)91 b(Other)24 b(\224soft)h
(sensors\224)p eop end
%%Page: 14 36
TeXDict begin 14 35 bop -38 -140 a Fo(14)859 b Fl(4.)46
b(Smartphone)18 b(Platform)h(and)h(Sensors)p -38 -106
3071 4 v eop end
%%Page: 15 37
TeXDict begin 15 36 bop 293 761 a Fn(5.)53 b(O)l(THER)25
b(LO)-5 b(W)l(-COST)25 b(SENSORS)h(AND)f(PLA)-9 b(TFORMS)-38
1202 y Fm(Intro...)637 1542 y Fb(5.1)99 b(The)25 b(Principle)g(of)g
(the)g(V)-6 b(isual)24 b(Odometer)374 1828 y Fk(5.1.1)92
b(Measuring)25 b(the)f(Distance)h(of)f(an)f(Object)h(from)g(the)f
(Camera)144 2081 y(5.1.2)92 b(Error)24 b(Detection)h(and)f(Ambiguity)h
(Resolving)g(for)f(the)g(V)-5 b(isual)23 b(Odometer)1146
2334 y(5.1.3)91 b(De)o(generac)o(y)692 2588 y(5.1.4)h(Performance)25
b(of)f(the)g(V)-5 b(isual)23 b(Odometer)p eop end
%%Page: 16 38
TeXDict begin 16 37 bop -38 -140 a Fo(16)773 b Fl(5.)46
b(Other)20 b(Lo)n(w-Cost)g(Sensors)g(and)f(Platforms)p
-38 -106 3071 4 v eop end
%%Page: 17 39
TeXDict begin 17 38 bop 647 761 a Fn(6.)53 b(SMAR)l(TPHONE)25
b(USER)g(CONTEXTS)-38 1202 y Fm(Intro...)85 1542 y Fb(6.1)99
b(V)-6 b(isual)24 b(Gyroscope)h(and)g(Odometer)f(Aided)g(Multi-Sensor)g
(Positioning)486 1828 y Fk(6.1.1)92 b(Kalman)24 b(Filter)f(Used)h(in)f
(Multi-Sensor)j(Positioning)p eop end
%%Page: 18 40
TeXDict begin 18 39 bop -38 -140 a Fo(18)978 b Fl(6.)46
b(Smartphone)18 b(User)j(Conte)o(xts)p -38 -106 3071
4 v eop end
%%Page: 19 41
TeXDict begin 19 40 bop 731 761 a Fn(7.)53 b(MARITIME)25
b(USER)g(CONTEXTS)-38 1202 y Fm(Intro)139 1542 y Fb(7.1)99
b(Ambiguity)23 b(Resolution)g(Using)h(Dif)n(ferenced)h(GNSS)h(Carrier)g
(Phase)1319 1681 y(Measurements)362 1967 y Fk(7.1.1)91
b(Ambiguous)25 b(T)m(ranslation)h(Using)e(the)g(Fundamental)h(Matrix)p
eop end
%%Page: 20 42
TeXDict begin 20 41 bop -38 -140 a Fo(20)1024 b Fl(7.)46
b(Maritime)20 b(User)g(Conte)o(xts)p -38 -106 3071 4
v eop end
%%Page: 21 43
TeXDict begin 21 42 bop 1068 761 a Fn(8.)53 b(CONCLUSIONS)-38
1202 y Fm(Intro...)1121 1542 y Fb(8.1)99 b(Main)25 b(Results)977
1832 y(8.2)99 b(Future)25 b(De)n(v)o(elopment)p eop end
%%Page: 22 44
TeXDict begin 22 43 bop -38 -140 a Fo(22)1220 b Fl(8.)46
b(Conclusions)p -38 -106 3071 4 v eop end
%%Page: 23 45
TeXDict begin 23 44 bop 1105 761 a Fn(BIBLIOGRAPHY)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
